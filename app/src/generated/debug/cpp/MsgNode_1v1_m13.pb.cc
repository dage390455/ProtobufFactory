// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgNode_1v1_m13.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MsgNode_1v1_m13.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LpwanParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LpwanParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* BleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BleParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorDataInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorDataInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SensorDataFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorDataFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiSensorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiSensorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiSensorDataInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiSensorDataInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AxisData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AxisData_reflection_ = NULL;
const ::google::protobuf::Descriptor* iBeacon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iBeacon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtSmoke_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtSmoke_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElecFireData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElecFireData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MantunData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MantunData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cayman_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cayman_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcrelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcrelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Activtion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClassType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SensorError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SensorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SensorStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AppCmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeAlarm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SmokeCtrl_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrackerCtrl_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MsgNode_5f1v1_5fm13_2eproto() {
  protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MsgNode_1v1_m13.proto");
  GOOGLE_CHECK(file != NULL);
  LpwanParam_descriptor_ = file->message_type(0);
  static const int LpwanParam_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, deveui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, appeui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, appkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, appskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, nwkskey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, devaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, datarate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, txpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, adr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, activition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, classtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, channelmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, maxeirp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, sglstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, sglfrequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, sgldatarate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, lbtstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, lbtthreshold_),
  };
  LpwanParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LpwanParam_descriptor_,
      LpwanParam::default_instance_,
      LpwanParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpwanParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LpwanParam));
  BleParam_descriptor_ = file->message_type(1);
  static const int BleParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, bleinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, bletxp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, bleontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, bleofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, bleonoff_),
  };
  BleParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BleParam_descriptor_,
      BleParam::default_instance_,
      BleParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BleParam));
  SensorData_descriptor_ = file->message_type(2);
  static const int SensorData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, alarmhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, alarmlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, alarmstephigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, alarmsteplow_),
  };
  SensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorData_descriptor_,
      SensorData::default_instance_,
      SensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorData));
  SensorDataInt_descriptor_ = file->message_type(3);
  static const int SensorDataInt_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, alarmhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, alarmlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, alarmstephigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, alarmsteplow_),
  };
  SensorDataInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorDataInt_descriptor_,
      SensorDataInt::default_instance_,
      SensorDataInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorDataInt));
  SensorDataFloat_descriptor_ = file->message_type(4);
  static const int SensorDataFloat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, alarmhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, alarmlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, alarmstephigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, alarmsteplow_),
  };
  SensorDataFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorDataFloat_descriptor_,
      SensorDataFloat::default_instance_,
      SensorDataFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorDataFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorDataFloat));
  MultiSensorData_descriptor_ = file->message_type(5);
  static const int MultiSensorData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, alarmhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, alarmlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, alarmstephigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, alarmsteplow_),
  };
  MultiSensorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiSensorData_descriptor_,
      MultiSensorData::default_instance_,
      MultiSensorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiSensorData));
  MultiSensorDataInt_descriptor_ = file->message_type(6);
  static const int MultiSensorDataInt_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, alarmhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, alarmlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, calibration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, alarmstephigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, alarmsteplow_),
  };
  MultiSensorDataInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiSensorDataInt_descriptor_,
      MultiSensorDataInt::default_instance_,
      MultiSensorDataInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorDataInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiSensorDataInt));
  GpsData_descriptor_ = file->message_type(7);
  static const int GpsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsData, altitude_),
  };
  GpsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpsData_descriptor_,
      GpsData::default_instance_,
      GpsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsData));
  AxisData_descriptor_ = file->message_type(8);
  static const int AxisData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxisData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxisData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxisData, z_),
  };
  AxisData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AxisData_descriptor_,
      AxisData::default_instance_,
      AxisData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxisData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxisData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AxisData));
  iBeacon_descriptor_ = file->message_type(9);
  static const int iBeacon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iBeacon, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iBeacon, umm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iBeacon, rssi_),
  };
  iBeacon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iBeacon_descriptor_,
      iBeacon::default_instance_,
      iBeacon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iBeacon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iBeacon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iBeacon));
  ExtSmoke_descriptor_ = file->message_type(10);
  static const int ExtSmoke_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSmoke, bgsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSmoke, bgsignalthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSmoke, bgsignalcalibration_),
  };
  ExtSmoke_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtSmoke_descriptor_,
      ExtSmoke::default_instance_,
      ExtSmoke_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSmoke, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtSmoke, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtSmoke));
  AppParam_descriptor_ = file->message_type(11);
  static const int AppParam_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, uploadinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, synctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, nodestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, nodealarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, nodealarmset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, confirm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, smokectrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, uploadrepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, alarmuploadinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, alarmuploadnb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, trackerctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, trackeremergencytime_),
  };
  AppParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppParam_descriptor_,
      AppParam::default_instance_,
      AppParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppParam));
  ElecFireData_descriptor_ = file->message_type(12);
  static const int ElecFireData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, vol_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, curr_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, leakage_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, power_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, elec_energy_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, temp_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, alarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, sensorpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, leakageth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, tempth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, currentth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, loadth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, volhighth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, vollowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, autoswitch_),
  };
  ElecFireData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElecFireData_descriptor_,
      ElecFireData::default_instance_,
      ElecFireData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElecFireData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElecFireData));
  MantunData_descriptor_ = file->message_type(13);
  static const int MantunData_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, volval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, currval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, leakageval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, powerval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, kwhval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, tempval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, swonoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, temp1outside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, temp2contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, volhighth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, vollowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, leakageth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, tempth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, currentth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, powerth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, temp1outsideth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, temp2contactth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, warning_),
  };
  MantunData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MantunData_descriptor_,
      MantunData::default_instance_,
      MantunData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MantunData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MantunData));
  Cayman_descriptor_ = file->message_type(14);
  static const int Cayman_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, issmoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, ismoved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, valueoftem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, valueofhum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, valueofsmoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, standarofsmoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, alarmofhightem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, alarmoflowtem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, alarmofhighhum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, alarmoflowhum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, cmd_),
  };
  Cayman_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cayman_descriptor_,
      Cayman::default_instance_,
      Cayman_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cayman, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cayman));
  AcrelData_descriptor_ = file->message_type(15);
  static const int AcrelData_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, shortcircuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, opencircuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, chstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, leakageval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t1val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t2val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t3val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t4val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, connectsw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, chenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, leakageth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t1th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t2th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t3th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, t4th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, aval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, bval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, cval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, valstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, acurr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, bcurr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, ccurr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, currstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, totalyg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, totalwg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, totalsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, totalfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, valhighset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, vallowset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, currhighset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, energykwh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, currentth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, deverror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, ct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, outputsw_),
  };
  AcrelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcrelData_descriptor_,
      AcrelData::default_instance_,
      AcrelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcrelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcrelData));
  MsgNode_descriptor_ = file->message_type(16);
  static const int MsgNode_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, cmdret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, lpwanparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, bleparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, appparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, battery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, magnetism_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, gyroscope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, humidity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, leak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, co_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, co2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, so2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, no2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, ch4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, ch2o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, lpg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, o3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, pm1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, pm2_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, pm10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, smoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, flame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, artificialgas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, multitemp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, waterpressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, ibeacon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, sensors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, installed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, extsmoke_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, firedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, mtundata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, acreldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, caymandata_),
  };
  MsgNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNode_descriptor_,
      MsgNode::default_instance_,
      MsgNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNode));
  Activtion_descriptor_ = file->enum_type(0);
  ClassType_descriptor_ = file->enum_type(1);
  SensorError_descriptor_ = file->enum_type(2);
  SensorType_descriptor_ = file->enum_type(3);
  SensorStatus_descriptor_ = file->enum_type(4);
  AppCmd_descriptor_ = file->enum_type(5);
  NodeState_descriptor_ = file->enum_type(6);
  NodeAlarm_descriptor_ = file->enum_type(7);
  SmokeCtrl_descriptor_ = file->enum_type(8);
  TrackerCtrl_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MsgNode_5f1v1_5fm13_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LpwanParam_descriptor_, &LpwanParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BleParam_descriptor_, &BleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorData_descriptor_, &SensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorDataInt_descriptor_, &SensorDataInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorDataFloat_descriptor_, &SensorDataFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiSensorData_descriptor_, &MultiSensorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiSensorDataInt_descriptor_, &MultiSensorDataInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsData_descriptor_, &GpsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AxisData_descriptor_, &AxisData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iBeacon_descriptor_, &iBeacon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtSmoke_descriptor_, &ExtSmoke::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppParam_descriptor_, &AppParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElecFireData_descriptor_, &ElecFireData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MantunData_descriptor_, &MantunData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cayman_descriptor_, &Cayman::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcrelData_descriptor_, &AcrelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNode_descriptor_, &MsgNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MsgNode_5f1v1_5fm13_2eproto() {
  delete LpwanParam::default_instance_;
  delete LpwanParam_reflection_;
  delete BleParam::default_instance_;
  delete BleParam_reflection_;
  delete SensorData::default_instance_;
  delete SensorData_reflection_;
  delete SensorDataInt::default_instance_;
  delete SensorDataInt_reflection_;
  delete SensorDataFloat::default_instance_;
  delete SensorDataFloat_reflection_;
  delete MultiSensorData::default_instance_;
  delete MultiSensorData_reflection_;
  delete MultiSensorDataInt::default_instance_;
  delete MultiSensorDataInt_reflection_;
  delete GpsData::default_instance_;
  delete GpsData_reflection_;
  delete AxisData::default_instance_;
  delete AxisData_reflection_;
  delete iBeacon::default_instance_;
  delete iBeacon_reflection_;
  delete ExtSmoke::default_instance_;
  delete ExtSmoke_reflection_;
  delete AppParam::default_instance_;
  delete AppParam_reflection_;
  delete ElecFireData::default_instance_;
  delete ElecFireData_reflection_;
  delete MantunData::default_instance_;
  delete MantunData_reflection_;
  delete Cayman::default_instance_;
  delete Cayman_reflection_;
  delete AcrelData::default_instance_;
  delete AcrelData_reflection_;
  delete MsgNode::default_instance_;
  delete MsgNode_reflection_;
}

void protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MsgNode_1v1_m13.proto\"\372\002\n\nLpwanParam\022\016"
    "\n\006devEui\030\001 \001(\014\022\016\n\006appEui\030\002 \001(\014\022\016\n\006appKey"
    "\030\003 \001(\014\022\017\n\007appSkey\030\004 \001(\014\022\017\n\007nwkSkey\030\005 \001(\014"
    "\022\017\n\007devAddr\030\006 \001(\r\022\020\n\010datarate\030\007 \001(\r\022\017\n\007t"
    "xPower\030\010 \001(\021\022\013\n\003adr\030\t \001(\r\022\036\n\nactivition\030"
    "\n \001(\0162\n.Activtion\022\035\n\tclassType\030\013 \001(\0162\n.C"
    "lassType\022\r\n\005delay\030\014 \001(\r\022\023\n\013channelMask\030\r"
    " \003(\r\022\017\n\007maxEIRP\030\016 \001(\r\022\021\n\tsglStatus\030\017 \001(\r"
    "\022\024\n\014sglFrequency\030\020 \001(\r\022\023\n\013sglDatarate\030\021 "
    "\001(\r\022\021\n\tlbtStatus\030\022 \001(\r\022\024\n\014lbtThreshold\030\023"
    " \001(\021\"h\n\010BleParam\022\023\n\013bleInterval\030\001 \001(\002\022\016\n"
    "\006bleTxp\030\002 \001(\021\022\021\n\tbleOnTime\030\003 \001(\r\022\022\n\nbleO"
    "ffTime\030\004 \001(\r\022\020\n\010bleOnOff\030\005 \001(\r\"\311\001\n\nSenso"
    "rData\022\031\n\004type\030\t \001(\0162\013.SensorType\022\014\n\004data"
    "\030\001 \001(\002\022\021\n\talarmHigh\030\002 \001(\002\022\020\n\010alarmLow\030\003 "
    "\001(\002\022\023\n\013calibration\030\004 \001(\r\022\033\n\005error\030\005 \001(\0162"
    "\014.SensorError\022\016\n\006status\030\006 \001(\r\022\025\n\ralarmSt"
    "epHigh\030\007 \001(\002\022\024\n\014alarmStepLow\030\010 \001(\002\"\314\001\n\rS"
    "ensorDataInt\022\031\n\004type\030\001 \001(\0162\013.SensorType\022"
    "\014\n\004data\030\002 \001(\021\022\021\n\talarmHigh\030\003 \001(\021\022\020\n\010alar"
    "mLow\030\004 \001(\021\022\023\n\013calibration\030\005 \001(\021\022\033\n\005error"
    "\030\006 \001(\0162\014.SensorError\022\016\n\006status\030\007 \001(\r\022\025\n\r"
    "alarmStepHigh\030\010 \001(\021\022\024\n\014alarmStepLow\030\t \001("
    "\021\"\316\001\n\017SensorDataFloat\022\031\n\004type\030\001 \001(\0162\013.Se"
    "nsorType\022\014\n\004data\030\002 \001(\002\022\021\n\talarmHigh\030\003 \001("
    "\002\022\020\n\010alarmLow\030\004 \001(\002\022\023\n\013calibration\030\005 \001(\021"
    "\022\033\n\005error\030\006 \001(\0162\014.SensorError\022\016\n\006status\030"
    "\007 \001(\r\022\025\n\ralarmStepHigh\030\010 \001(\002\022\024\n\014alarmSte"
    "pLow\030\t \001(\002\"\263\001\n\017MultiSensorData\022\014\n\004data\030\001"
    " \003(\002\022\021\n\talarmHigh\030\002 \001(\002\022\020\n\010alarmLow\030\003 \001("
    "\002\022\023\n\013calibration\030\004 \001(\r\022\033\n\005error\030\005 \001(\0162\014."
    "SensorError\022\016\n\006status\030\006 \001(\r\022\025\n\ralarmStep"
    "High\030\007 \001(\002\022\024\n\014alarmStepLow\030\010 \001(\002\"\266\001\n\022Mul"
    "tiSensorDataInt\022\014\n\004data\030\001 \003(\021\022\021\n\talarmHi"
    "gh\030\002 \001(\021\022\020\n\010alarmLow\030\003 \001(\021\022\023\n\013calibratio"
    "n\030\004 \001(\r\022\033\n\005error\030\005 \001(\0162\014.SensorError\022\016\n\006"
    "status\030\006 \001(\r\022\025\n\ralarmStepHigh\030\007 \001(\021\022\024\n\014a"
    "larmStepLow\030\010 \001(\021\"@\n\007GpsData\022\020\n\010latitude"
    "\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altitude\030\003 "
    "\001(\001\"+\n\010AxisData\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n"
    "\001z\030\003 \001(\002\"2\n\007iBeacon\022\014\n\004addr\030\001 \001(\014\022\013\n\003umm"
    "\030\002 \001(\014\022\014\n\004rssi\030\003 \001(\021\"T\n\010ExtSmoke\022\020\n\010bgSi"
    "gnal\030\001 \001(\r\022\031\n\021bgSignalThreshold\030\002 \001(\r\022\033\n"
    "\023bgSignalCalibration\030\003 \001(\r\"\331\002\n\010AppParam\022"
    "\024\n\003cmd\030\001 \001(\0162\007.AppCmd\022\026\n\016uploadInterval\030"
    "\002 \001(\r\022\020\n\010syncTime\030\003 \001(\r\022\035\n\tnodeState\030\004 \001"
    "(\0162\n.NodeState\022\035\n\tnodeAlarm\030\005 \001(\0162\n.Node"
    "Alarm\022\024\n\014nodeAlarmSet\030\006 \001(\r\022\017\n\007confirm\030\007"
    " \001(\r\022\035\n\tsmokeCtrl\030\010 \001(\0162\n.SmokeCtrl\022\024\n\014u"
    "ploadRepeat\030\t \001(\r\022\033\n\023alarmUploadInterval"
    "\030\n \001(\r\022\025\n\ralarmUploadNb\030\013 \001(\r\022!\n\013tracker"
    "Ctrl\030\014 \001(\0162\014.TrackerCtrl\022\034\n\024trackerEmerg"
    "encyTime\030\r \001(\r\"\321\002\n\014ElecFireData\022\017\n\007vol_v"
    "al\030\001 \001(\021\022\020\n\010curr_val\030\002 \001(\r\022\023\n\013leakage_va"
    "l\030\003 \001(\021\022\021\n\tpower_val\030\004 \001(\r\022\027\n\017elec_energ"
    "y_val\030\005 \001(\r\022\020\n\010temp_val\030\006 \001(\r\022\016\n\006status\030"
    "\007 \001(\r\022\r\n\005alarm\030\010 \001(\r\022\r\n\005error\030\t \001(\r\022\021\n\ts"
    "ensorPwd\030\n \001(\r\022\021\n\tleakageTh\030\013 \001(\r\022\016\n\006tem"
    "pTh\030\014 \001(\r\022\021\n\tcurrentTh\030\r \001(\r\022\016\n\006loadTh\030\016"
    " \001(\r\022\021\n\tvolHighTh\030\017 \001(\r\022\020\n\010volLowTh\030\020 \001("
    "\r\022\013\n\003cmd\030\021 \001(\r\022\022\n\nautoSwitch\030\022 \001(\r\"\216\003\n\nM"
    "antunData\022\016\n\006volVal\030\001 \001(\r\022\017\n\007currVal\030\002 \001"
    "(\r\022\022\n\nleakageVal\030\003 \001(\r\022\020\n\010powerVal\030\004 \001(\r"
    "\022\016\n\006kwhVal\030\005 \001(\r\022\017\n\007tempVal\030\006 \001(\r\022\016\n\006sta"
    "tus\030\007 \001(\r\022\017\n\007swOnOff\030\010 \001(\r\022\024\n\014temp1Outsi"
    "de\030\t \001(\r\022\024\n\014temp2Contact\030\n \001(\r\022\021\n\tvolHig"
    "hTh\030\013 \001(\r\022\020\n\010volLowTh\030\014 \001(\r\022\021\n\tleakageTh"
    "\030\r \001(\r\022\016\n\006tempTh\030\016 \001(\r\022\021\n\tcurrentTh\030\017 \001("
    "\r\022\017\n\007powerTh\030\020 \001(\r\022\026\n\016temp1OutsideTh\030\021 \001"
    "(\r\022\026\n\016temp2ContactTh\030\022 \001(\r\022\021\n\tattribute\030"
    "\023 \001(\r\022\013\n\003cmd\030\024 \001(\r\022\017\n\007warning\030\025 \001(\r\"\353\001\n\006"
    "Cayman\022\017\n\007isSmoke\030\001 \001(\r\022\017\n\007isMoved\030\002 \001(\r"
    "\022\022\n\nvalueOfTem\030\003 \001(\021\022\022\n\nvalueOfHum\030\004 \001(\r"
    "\022\024\n\014valueOfSmoke\030\005 \001(\r\022\026\n\016standarOfSmoke"
    "\030\006 \001(\r\022\026\n\016alarmOfHighTem\030\007 \001(\021\022\025\n\ralarmO"
    "fLowTem\030\010 \001(\021\022\026\n\016alarmOfHighHum\030\t \001(\r\022\025\n"
    "\ralarmOfLowHum\030\n \001(\r\022\013\n\003cmd\030\013 \001(\r\"\222\005\n\tAc"
    "relData\022\023\n\013channelType\030\001 \001(\r\022\024\n\014shortCir"
    "cuit\030\002 \001(\r\022\023\n\013openCircuit\030\003 \001(\r\022\020\n\010chSta"
    "tus\030\004 \001(\r\022\022\n\nleakageVal\030\005 \001(\021\022\r\n\005t1Val\030\006"
    " \001(\021\022\r\n\005t2Val\030\007 \001(\021\022\r\n\005t3Val\030\010 \001(\021\022\r\n\005t4"
    "Val\030\t \001(\021\022\021\n\tconnectSw\030\n \001(\r\022\020\n\010chEnable"
    "\030\013 \001(\r\022\021\n\tleakageTh\030\014 \001(\r\022\014\n\004t1Th\030\r \001(\r\022"
    "\014\n\004t2Th\030\016 \001(\r\022\014\n\004t3Th\030\017 \001(\r\022\014\n\004t4Th\030\020 \001("
    "\r\022\016\n\006passwd\030\021 \001(\r\022\014\n\004aVal\030\022 \001(\r\022\014\n\004bVal\030"
    "\023 \001(\r\022\014\n\004cVal\030\024 \001(\r\022\021\n\tvalStatus\030\025 \001(\r\022\r"
    "\n\005aCurr\030\026 \001(\r\022\r\n\005bCurr\030\027 \001(\r\022\r\n\005cCurr\030\030 "
    "\001(\r\022\022\n\ncurrStatus\030\031 \001(\r\022\017\n\007totalYg\030\032 \001(\r"
    "\022\017\n\007totalWg\030\033 \001(\r\022\017\n\007totalSz\030\034 \001(\r\022\023\n\013to"
    "talFactor\030\035 \001(\r\022\022\n\nvalHighSet\030\036 \001(\r\022\021\n\tv"
    "alLowSet\030\037 \001(\r\022\023\n\013currHighSet\030  \001(\r\022\021\n\te"
    "nergyKwh\030! \001(\r\022\021\n\tcurrentTh\030\" \001(\r\022\013\n\003cmd"
    "\030# \001(\r\022\020\n\010devError\030$ \001(\r\022\n\n\002ct\030% \001(\r\022\020\n\010"
    "outputSw\030& \001(\r\"\337\t\n\007MsgNode\022\n\n\002id\030\001 \001(\r\022\013"
    "\n\003cmd\030\002 \001(\r\022\016\n\006cmdRet\030\003 \001(\r\022\037\n\nlpwanPara"
    "m\030\004 \001(\0132\013.LpwanParam\022\033\n\010bleParam\030\005 \001(\0132\t"
    ".BleParam\022\033\n\010appParam\030\006 \001(\0132\t.AppParam\022\017"
    "\n\007battery\030\007 \001(\021\022\025\n\003gps\030\010 \001(\0132\010.GpsData\022\037"
    "\n\014acceleration\030\t \001(\0132\t.AxisData\022\034\n\tmagne"
    "tism\030\n \001(\0132\t.AxisData\022\034\n\tgyroscope\030\013 \001(\013"
    "2\t.AxisData\022 \n\013temperature\030\014 \001(\0132\013.Senso"
    "rData\022\035\n\010humidity\030\r \001(\0132\013.SensorData\022\032\n\005"
    "light\030\016 \001(\0132\013.SensorData\022\031\n\004leak\030\017 \001(\0132\013"
    ".SensorData\022\027\n\002co\030\020 \001(\0132\013.SensorData\022\030\n\003"
    "co2\030\021 \001(\0132\013.SensorData\022\030\n\003so2\030\022 \001(\0132\013.Se"
    "nsorData\022\030\n\003no2\030\023 \001(\0132\013.SensorData\022\030\n\003ch"
    "4\030\024 \001(\0132\013.SensorData\022\031\n\004ch2o\030\025 \001(\0132\013.Sen"
    "sorData\022\030\n\003lpg\030\026 \001(\0132\013.SensorData\022\027\n\002o3\030"
    "\027 \001(\0132\013.SensorData\022\030\n\003pm1\030\030 \001(\0132\013.Sensor"
    "Data\022\032\n\005pm2_5\030\031 \001(\0132\013.SensorData\022\031\n\004pm10"
    "\030\032 \001(\0132\013.SensorData\022\032\n\005angle\030\033 \001(\0132\013.Sen"
    "sorData\022\032\n\005cover\030\034 \001(\0132\013.SensorData\022\032\n\005l"
    "evel\030\035 \001(\0132\013.SensorData\022\032\n\005smoke\030\036 \001(\0132\013"
    ".SensorData\022\032\n\005pitch\030\037 \001(\0132\013.SensorData\022"
    "\031\n\004roll\030  \001(\0132\013.SensorData\022\030\n\003yaw\030! \001(\0132"
    "\013.SensorData\022\035\n\005flame\030\" \001(\0132\016.SensorData"
    "Int\022\"\n\rartificialGas\030# \001(\0132\013.SensorData\022"
    "&\n\tmultiTemp\030$ \001(\0132\023.MultiSensorDataInt\022"
    "\"\n\rwaterPressure\030% \001(\0132\013.SensorData\022\031\n\007i"
    "beacon\030& \001(\0132\010.iBeacon\022\034\n\007sensors\030\' \003(\0132"
    "\013.SensorData\022\021\n\tinstalled\030( \001(\010\022\033\n\010extSm"
    "oke\030) \001(\0132\t.ExtSmoke\022\037\n\010fireData\030* \001(\0132\r"
    ".ElecFireData\022\035\n\010mtunData\030+ \001(\0132\013.Mantun"
    "Data\022\035\n\tacrelData\030, \001(\0132\n.AcrelData\022\033\n\nc"
    "aymanData\030- \001(\0132\007.Cayman*\035\n\tActivtion\022\007\n"
    "\003ABP\020\000\022\007\n\003OTA\020\001*2\n\tClassType\022\013\n\007CLASS_A\020"
    "\000\022\013\n\007CLASS_B\020\001\022\013\n\007CLASS_C\020\002*\334\001\n\013SensorEr"
    "ror\022\023\n\017SENSOR_ERR_NONE\020\000\022\026\n\022SENSOR_ERR_N"
    "O_DATA\020\001\022\022\n\016SENSOR_ERR_CRC\020\002\022\023\n\017SENSOR_E"
    "RR_DATA\020\003\022\024\n\020SENSOR_ERR_FAULT\020\004\022\024\n\020SENSO"
    "R_ERR_ALARM\020\005\022\031\n\025SENSOR_ERR_ALARM_HIGH\020\006"
    "\022\030\n\024SENSOR_ERR_ALARM_LOW\020\007\022\026\n\022SENSOR_ERR"
    "_UNKNOWN\020\177*\222\003\n\nSensorType\022\024\n\020SENSOR_TYPE"
    "_TEMP\020\000\022\024\n\020SENSOR_TYPE_HUMI\020\001\022\025\n\021SENSOR_"
    "TYPE_LIGHT\020\002\022\023\n\017SENSOR_TYPE_GPS\020\003\022\025\n\021SEN"
    "SOR_TYPE_ANGLE\020\004\022\025\n\021SENSOR_TYPE_PM2_5\020\005\022"
    "\024\n\020SENSOR_TYPE_PM10\020\006\022\024\n\020SENSOR_TYPE_LEA"
    "K\020\007\022\022\n\016SENSOR_TYPE_CO\020\010\022\023\n\017SENSOR_TYPE_C"
    "O2\020\t\022\023\n\017SENSOR_TYPE_NO2\020\n\022\023\n\017SENSOR_TYPE"
    "_CH4\020\013\022\023\n\017SENSOR_TYPE_LPG\020\014\022\025\n\021SENSOR_TY"
    "PE_FLAME\020\r\022\036\n\032SENSOR_TYPE_ARTIFICIAL_GAS"
    "\020\016\022\032\n\026SENSOR_TYPE_WATER_GAGE\020\017\022\027\n\023SENSOR"
    "_TYPE_TRACKER\020\020*e\n\014SensorStatus\022\027\n\023SENSO"
    "RO_STATUS_NONE\020\000\022\"\n\036SENSORO_STATUS_SELF_"
    "INSPECTION\020\001\022\030\n\024SENSORO_STATUS_ALARM\020\002*U"
    "\n\006AppCmd\022\020\n\014APP_CMD_NONE\020\000\022\021\n\rAPP_CMD_RE"
    "SET\020\001\022\025\n\021APP_CMD_FAC_RESET\020\002\022\017\n\013APP_CMD_"
    "DFU\020\003*O\n\tNodeState\022\026\n\022NODE_STATE_UNKNOWN"
    "\020\000\022\025\n\021NODE_STATE_STATIC\020\001\022\023\n\017NODE_STATE_"
    "MOVE\020\002*\251\001\n\tNodeAlarm\022\023\n\017NODE_ALARM_NONE\020"
    "\000\022\025\n\021NODE_ALARM_STATIC\020\001\022\023\n\017NODE_ALARM_M"
    "OVE\020\002\022\030\n\024NODE_ALARM_COLLISION\020\003\022\023\n\017NODE_"
    "ALARM_ROLL\020\004\022\027\n\023NODE_ALARM_INVERTED\020\005\022\023\n"
    "\017NODE_ALARM_FALL\020\006*i\n\tSmokeCtrl\022\023\n\017SMOKE"
    "_CTRL_NONE\020\000\022\021\n\rSMOKE_ERASURE\020\001\022\031\n\025SMOKE"
    "_INSPECTION_TEST\020\002\022\031\n\025SMOKE_INSPECTION_O"
    "VER\020\003*\255\001\n\013TrackerCtrl\022\020\n\014TRACKER_Ctrl\020\000\022"
    "\020\n\014TRACKER_BOOT\020\001\022\024\n\020TRACKER_SHUTDOWN\020\002\022"
    "\026\n\022TRACKER_CALL_START\020\003\022\024\n\020TRACKER_CALL_"
    "END\020\004\022\033\n\027TRACKER_EMERGENCE_START\020\005\022\031\n\025TR"
    "ACKER_EMERGENCE_END\020\006", 6421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MsgNode_1v1_m13.proto", &protobuf_RegisterTypes);
  LpwanParam::default_instance_ = new LpwanParam();
  BleParam::default_instance_ = new BleParam();
  SensorData::default_instance_ = new SensorData();
  SensorDataInt::default_instance_ = new SensorDataInt();
  SensorDataFloat::default_instance_ = new SensorDataFloat();
  MultiSensorData::default_instance_ = new MultiSensorData();
  MultiSensorDataInt::default_instance_ = new MultiSensorDataInt();
  GpsData::default_instance_ = new GpsData();
  AxisData::default_instance_ = new AxisData();
  iBeacon::default_instance_ = new iBeacon();
  ExtSmoke::default_instance_ = new ExtSmoke();
  AppParam::default_instance_ = new AppParam();
  ElecFireData::default_instance_ = new ElecFireData();
  MantunData::default_instance_ = new MantunData();
  Cayman::default_instance_ = new Cayman();
  AcrelData::default_instance_ = new AcrelData();
  MsgNode::default_instance_ = new MsgNode();
  LpwanParam::default_instance_->InitAsDefaultInstance();
  BleParam::default_instance_->InitAsDefaultInstance();
  SensorData::default_instance_->InitAsDefaultInstance();
  SensorDataInt::default_instance_->InitAsDefaultInstance();
  SensorDataFloat::default_instance_->InitAsDefaultInstance();
  MultiSensorData::default_instance_->InitAsDefaultInstance();
  MultiSensorDataInt::default_instance_->InitAsDefaultInstance();
  GpsData::default_instance_->InitAsDefaultInstance();
  AxisData::default_instance_->InitAsDefaultInstance();
  iBeacon::default_instance_->InitAsDefaultInstance();
  ExtSmoke::default_instance_->InitAsDefaultInstance();
  AppParam::default_instance_->InitAsDefaultInstance();
  ElecFireData::default_instance_->InitAsDefaultInstance();
  MantunData::default_instance_->InitAsDefaultInstance();
  Cayman::default_instance_->InitAsDefaultInstance();
  AcrelData::default_instance_->InitAsDefaultInstance();
  MsgNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MsgNode_5f1v1_5fm13_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MsgNode_5f1v1_5fm13_2eproto {
  StaticDescriptorInitializer_MsgNode_5f1v1_5fm13_2eproto() {
    protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  }
} static_descriptor_initializer_MsgNode_5f1v1_5fm13_2eproto_;
const ::google::protobuf::EnumDescriptor* Activtion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activtion_descriptor_;
}
bool Activtion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClassType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassType_descriptor_;
}
bool ClassType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorError_descriptor_;
}
bool SensorError_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 127:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorType_descriptor_;
}
bool SensorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorStatus_descriptor_;
}
bool SensorStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AppCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCmd_descriptor_;
}
bool AppCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeState_descriptor_;
}
bool NodeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeAlarm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeAlarm_descriptor_;
}
bool NodeAlarm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SmokeCtrl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmokeCtrl_descriptor_;
}
bool SmokeCtrl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrackerCtrl_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerCtrl_descriptor_;
}
bool TrackerCtrl_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LpwanParam::kDevEuiFieldNumber;
const int LpwanParam::kAppEuiFieldNumber;
const int LpwanParam::kAppKeyFieldNumber;
const int LpwanParam::kAppSkeyFieldNumber;
const int LpwanParam::kNwkSkeyFieldNumber;
const int LpwanParam::kDevAddrFieldNumber;
const int LpwanParam::kDatarateFieldNumber;
const int LpwanParam::kTxPowerFieldNumber;
const int LpwanParam::kAdrFieldNumber;
const int LpwanParam::kActivitionFieldNumber;
const int LpwanParam::kClassTypeFieldNumber;
const int LpwanParam::kDelayFieldNumber;
const int LpwanParam::kChannelMaskFieldNumber;
const int LpwanParam::kMaxEIRPFieldNumber;
const int LpwanParam::kSglStatusFieldNumber;
const int LpwanParam::kSglFrequencyFieldNumber;
const int LpwanParam::kSglDatarateFieldNumber;
const int LpwanParam::kLbtStatusFieldNumber;
const int LpwanParam::kLbtThresholdFieldNumber;
#endif  // !_MSC_VER

LpwanParam::LpwanParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LpwanParam::InitAsDefaultInstance() {
}

LpwanParam::LpwanParam(const LpwanParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LpwanParam::SharedCtor() {
  _cached_size_ = 0;
  deveui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appeui_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nwkskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devaddr_ = 0u;
  datarate_ = 0u;
  txpower_ = 0;
  adr_ = 0u;
  activition_ = 0;
  classtype_ = 0;
  delay_ = 0u;
  maxeirp_ = 0u;
  sglstatus_ = 0u;
  sglfrequency_ = 0u;
  sgldatarate_ = 0u;
  lbtstatus_ = 0u;
  lbtthreshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LpwanParam::~LpwanParam() {
  SharedDtor();
}

void LpwanParam::SharedDtor() {
  if (deveui_ != &::google::protobuf::internal::kEmptyString) {
    delete deveui_;
  }
  if (appeui_ != &::google::protobuf::internal::kEmptyString) {
    delete appeui_;
  }
  if (appkey_ != &::google::protobuf::internal::kEmptyString) {
    delete appkey_;
  }
  if (appskey_ != &::google::protobuf::internal::kEmptyString) {
    delete appskey_;
  }
  if (nwkskey_ != &::google::protobuf::internal::kEmptyString) {
    delete nwkskey_;
  }
  if (this != default_instance_) {
  }
}

void LpwanParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LpwanParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LpwanParam_descriptor_;
}

const LpwanParam& LpwanParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

LpwanParam* LpwanParam::default_instance_ = NULL;

LpwanParam* LpwanParam::New() const {
  return new LpwanParam;
}

void LpwanParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deveui()) {
      if (deveui_ != &::google::protobuf::internal::kEmptyString) {
        deveui_->clear();
      }
    }
    if (has_appeui()) {
      if (appeui_ != &::google::protobuf::internal::kEmptyString) {
        appeui_->clear();
      }
    }
    if (has_appkey()) {
      if (appkey_ != &::google::protobuf::internal::kEmptyString) {
        appkey_->clear();
      }
    }
    if (has_appskey()) {
      if (appskey_ != &::google::protobuf::internal::kEmptyString) {
        appskey_->clear();
      }
    }
    if (has_nwkskey()) {
      if (nwkskey_ != &::google::protobuf::internal::kEmptyString) {
        nwkskey_->clear();
      }
    }
    devaddr_ = 0u;
    datarate_ = 0u;
    txpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adr_ = 0u;
    activition_ = 0;
    classtype_ = 0;
    delay_ = 0u;
    maxeirp_ = 0u;
    sglstatus_ = 0u;
    sglfrequency_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sgldatarate_ = 0u;
    lbtstatus_ = 0u;
    lbtthreshold_ = 0;
  }
  channelmask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LpwanParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes devEui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_deveui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appEui;
        break;
      }

      // optional bytes appEui = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appEui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appeui()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appKey;
        break;
      }

      // optional bytes appKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appSkey;
        break;
      }

      // optional bytes appSkey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appSkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appskey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nwkSkey;
        break;
      }

      // optional bytes nwkSkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nwkSkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nwkskey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_devAddr;
        break;
      }

      // optional uint32 devAddr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devAddr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devaddr_)));
          set_has_devaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_datarate;
        break;
      }

      // optional uint32 datarate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datarate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datarate_)));
          set_has_datarate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_txPower;
        break;
      }

      // optional sint32 txPower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &txpower_)));
          set_has_txpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_adr;
        break;
      }

      // optional uint32 adr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adr_)));
          set_has_adr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_activition;
        break;
      }

      // optional .Activtion activition = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Activtion_IsValid(value)) {
            set_activition(static_cast< ::Activtion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_classType;
        break;
      }

      // optional .ClassType classType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ClassType_IsValid(value)) {
            set_classtype(static_cast< ::ClassType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_channelMask;
        break;
      }

      // repeated uint32 channelMask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_channelmask())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channelmask())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_channelMask;
        if (input->ExpectTag(112)) goto parse_maxEIRP;
        break;
      }

      // optional uint32 maxEIRP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxEIRP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxeirp_)));
          set_has_maxeirp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sglStatus;
        break;
      }

      // optional uint32 sglStatus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sglStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sglstatus_)));
          set_has_sglstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sglFrequency;
        break;
      }

      // optional uint32 sglFrequency = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sglFrequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sglfrequency_)));
          set_has_sglfrequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sglDatarate;
        break;
      }

      // optional uint32 sglDatarate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sglDatarate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sgldatarate_)));
          set_has_sgldatarate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lbtStatus;
        break;
      }

      // optional uint32 lbtStatus = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lbtStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lbtstatus_)));
          set_has_lbtstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_lbtThreshold;
        break;
      }

      // optional sint32 lbtThreshold = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lbtThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lbtthreshold_)));
          set_has_lbtthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LpwanParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes devEui = 1;
  if (has_deveui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->deveui(), output);
  }

  // optional bytes appEui = 2;
  if (has_appeui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->appeui(), output);
  }

  // optional bytes appKey = 3;
  if (has_appkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->appkey(), output);
  }

  // optional bytes appSkey = 4;
  if (has_appskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->appskey(), output);
  }

  // optional bytes nwkSkey = 5;
  if (has_nwkskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->nwkskey(), output);
  }

  // optional uint32 devAddr = 6;
  if (has_devaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->devaddr(), output);
  }

  // optional uint32 datarate = 7;
  if (has_datarate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->datarate(), output);
  }

  // optional sint32 txPower = 8;
  if (has_txpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->txpower(), output);
  }

  // optional uint32 adr = 9;
  if (has_adr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adr(), output);
  }

  // optional .Activtion activition = 10;
  if (has_activition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->activition(), output);
  }

  // optional .ClassType classType = 11;
  if (has_classtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->classtype(), output);
  }

  // optional uint32 delay = 12;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->delay(), output);
  }

  // repeated uint32 channelMask = 13;
  for (int i = 0; i < this->channelmask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->channelmask(i), output);
  }

  // optional uint32 maxEIRP = 14;
  if (has_maxeirp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->maxeirp(), output);
  }

  // optional uint32 sglStatus = 15;
  if (has_sglstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sglstatus(), output);
  }

  // optional uint32 sglFrequency = 16;
  if (has_sglfrequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->sglfrequency(), output);
  }

  // optional uint32 sglDatarate = 17;
  if (has_sgldatarate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sgldatarate(), output);
  }

  // optional uint32 lbtStatus = 18;
  if (has_lbtstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->lbtstatus(), output);
  }

  // optional sint32 lbtThreshold = 19;
  if (has_lbtthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->lbtthreshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LpwanParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes devEui = 1;
  if (has_deveui()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->deveui(), target);
  }

  // optional bytes appEui = 2;
  if (has_appeui()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->appeui(), target);
  }

  // optional bytes appKey = 3;
  if (has_appkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->appkey(), target);
  }

  // optional bytes appSkey = 4;
  if (has_appskey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->appskey(), target);
  }

  // optional bytes nwkSkey = 5;
  if (has_nwkskey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->nwkskey(), target);
  }

  // optional uint32 devAddr = 6;
  if (has_devaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->devaddr(), target);
  }

  // optional uint32 datarate = 7;
  if (has_datarate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->datarate(), target);
  }

  // optional sint32 txPower = 8;
  if (has_txpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->txpower(), target);
  }

  // optional uint32 adr = 9;
  if (has_adr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->adr(), target);
  }

  // optional .Activtion activition = 10;
  if (has_activition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->activition(), target);
  }

  // optional .ClassType classType = 11;
  if (has_classtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->classtype(), target);
  }

  // optional uint32 delay = 12;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->delay(), target);
  }

  // repeated uint32 channelMask = 13;
  for (int i = 0; i < this->channelmask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->channelmask(i), target);
  }

  // optional uint32 maxEIRP = 14;
  if (has_maxeirp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->maxeirp(), target);
  }

  // optional uint32 sglStatus = 15;
  if (has_sglstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sglstatus(), target);
  }

  // optional uint32 sglFrequency = 16;
  if (has_sglfrequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->sglfrequency(), target);
  }

  // optional uint32 sglDatarate = 17;
  if (has_sgldatarate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sgldatarate(), target);
  }

  // optional uint32 lbtStatus = 18;
  if (has_lbtstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->lbtstatus(), target);
  }

  // optional sint32 lbtThreshold = 19;
  if (has_lbtthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->lbtthreshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LpwanParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes devEui = 1;
    if (has_deveui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->deveui());
    }

    // optional bytes appEui = 2;
    if (has_appeui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appeui());
    }

    // optional bytes appKey = 3;
    if (has_appkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appkey());
    }

    // optional bytes appSkey = 4;
    if (has_appskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appskey());
    }

    // optional bytes nwkSkey = 5;
    if (has_nwkskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nwkskey());
    }

    // optional uint32 devAddr = 6;
    if (has_devaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devaddr());
    }

    // optional uint32 datarate = 7;
    if (has_datarate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datarate());
    }

    // optional sint32 txPower = 8;
    if (has_txpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->txpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 adr = 9;
    if (has_adr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adr());
    }

    // optional .Activtion activition = 10;
    if (has_activition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activition());
    }

    // optional .ClassType classType = 11;
    if (has_classtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->classtype());
    }

    // optional uint32 delay = 12;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 maxEIRP = 14;
    if (has_maxeirp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxeirp());
    }

    // optional uint32 sglStatus = 15;
    if (has_sglstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sglstatus());
    }

    // optional uint32 sglFrequency = 16;
    if (has_sglfrequency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sglfrequency());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 sglDatarate = 17;
    if (has_sgldatarate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sgldatarate());
    }

    // optional uint32 lbtStatus = 18;
    if (has_lbtstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lbtstatus());
    }

    // optional sint32 lbtThreshold = 19;
    if (has_lbtthreshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lbtthreshold());
    }

  }
  // repeated uint32 channelMask = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->channelmask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channelmask(i));
    }
    total_size += 1 * this->channelmask_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LpwanParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LpwanParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LpwanParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LpwanParam::MergeFrom(const LpwanParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  channelmask_.MergeFrom(from.channelmask_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deveui()) {
      set_deveui(from.deveui());
    }
    if (from.has_appeui()) {
      set_appeui(from.appeui());
    }
    if (from.has_appkey()) {
      set_appkey(from.appkey());
    }
    if (from.has_appskey()) {
      set_appskey(from.appskey());
    }
    if (from.has_nwkskey()) {
      set_nwkskey(from.nwkskey());
    }
    if (from.has_devaddr()) {
      set_devaddr(from.devaddr());
    }
    if (from.has_datarate()) {
      set_datarate(from.datarate());
    }
    if (from.has_txpower()) {
      set_txpower(from.txpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adr()) {
      set_adr(from.adr());
    }
    if (from.has_activition()) {
      set_activition(from.activition());
    }
    if (from.has_classtype()) {
      set_classtype(from.classtype());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_maxeirp()) {
      set_maxeirp(from.maxeirp());
    }
    if (from.has_sglstatus()) {
      set_sglstatus(from.sglstatus());
    }
    if (from.has_sglfrequency()) {
      set_sglfrequency(from.sglfrequency());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sgldatarate()) {
      set_sgldatarate(from.sgldatarate());
    }
    if (from.has_lbtstatus()) {
      set_lbtstatus(from.lbtstatus());
    }
    if (from.has_lbtthreshold()) {
      set_lbtthreshold(from.lbtthreshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LpwanParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LpwanParam::CopyFrom(const LpwanParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LpwanParam::IsInitialized() const {

  return true;
}

void LpwanParam::Swap(LpwanParam* other) {
  if (other != this) {
    std::swap(deveui_, other->deveui_);
    std::swap(appeui_, other->appeui_);
    std::swap(appkey_, other->appkey_);
    std::swap(appskey_, other->appskey_);
    std::swap(nwkskey_, other->nwkskey_);
    std::swap(devaddr_, other->devaddr_);
    std::swap(datarate_, other->datarate_);
    std::swap(txpower_, other->txpower_);
    std::swap(adr_, other->adr_);
    std::swap(activition_, other->activition_);
    std::swap(classtype_, other->classtype_);
    std::swap(delay_, other->delay_);
    channelmask_.Swap(&other->channelmask_);
    std::swap(maxeirp_, other->maxeirp_);
    std::swap(sglstatus_, other->sglstatus_);
    std::swap(sglfrequency_, other->sglfrequency_);
    std::swap(sgldatarate_, other->sgldatarate_);
    std::swap(lbtstatus_, other->lbtstatus_);
    std::swap(lbtthreshold_, other->lbtthreshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LpwanParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LpwanParam_descriptor_;
  metadata.reflection = LpwanParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BleParam::kBleIntervalFieldNumber;
const int BleParam::kBleTxpFieldNumber;
const int BleParam::kBleOnTimeFieldNumber;
const int BleParam::kBleOffTimeFieldNumber;
const int BleParam::kBleOnOffFieldNumber;
#endif  // !_MSC_VER

BleParam::BleParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BleParam::InitAsDefaultInstance() {
}

BleParam::BleParam(const BleParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BleParam::SharedCtor() {
  _cached_size_ = 0;
  bleinterval_ = 0;
  bletxp_ = 0;
  bleontime_ = 0u;
  bleofftime_ = 0u;
  bleonoff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BleParam::~BleParam() {
  SharedDtor();
}

void BleParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BleParam_descriptor_;
}

const BleParam& BleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

BleParam* BleParam::default_instance_ = NULL;

BleParam* BleParam::New() const {
  return new BleParam;
}

void BleParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bleinterval_ = 0;
    bletxp_ = 0;
    bleontime_ = 0u;
    bleofftime_ = 0u;
    bleonoff_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bleInterval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bleinterval_)));
          set_has_bleinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bleTxp;
        break;
      }

      // optional sint32 bleTxp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bleTxp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &bletxp_)));
          set_has_bletxp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bleOnTime;
        break;
      }

      // optional uint32 bleOnTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bleOnTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bleontime_)));
          set_has_bleontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bleOffTime;
        break;
      }

      // optional uint32 bleOffTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bleOffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bleofftime_)));
          set_has_bleofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bleOnOff;
        break;
      }

      // optional uint32 bleOnOff = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bleOnOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bleonoff_)));
          set_has_bleonoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float bleInterval = 1;
  if (has_bleinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bleinterval(), output);
  }

  // optional sint32 bleTxp = 2;
  if (has_bletxp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->bletxp(), output);
  }

  // optional uint32 bleOnTime = 3;
  if (has_bleontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bleontime(), output);
  }

  // optional uint32 bleOffTime = 4;
  if (has_bleofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bleofftime(), output);
  }

  // optional uint32 bleOnOff = 5;
  if (has_bleonoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bleonoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BleParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float bleInterval = 1;
  if (has_bleinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->bleinterval(), target);
  }

  // optional sint32 bleTxp = 2;
  if (has_bletxp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->bletxp(), target);
  }

  // optional uint32 bleOnTime = 3;
  if (has_bleontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bleontime(), target);
  }

  // optional uint32 bleOffTime = 4;
  if (has_bleofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bleofftime(), target);
  }

  // optional uint32 bleOnOff = 5;
  if (has_bleonoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bleonoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BleParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float bleInterval = 1;
    if (has_bleinterval()) {
      total_size += 1 + 4;
    }

    // optional sint32 bleTxp = 2;
    if (has_bletxp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->bletxp());
    }

    // optional uint32 bleOnTime = 3;
    if (has_bleontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bleontime());
    }

    // optional uint32 bleOffTime = 4;
    if (has_bleofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bleofftime());
    }

    // optional uint32 bleOnOff = 5;
    if (has_bleonoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bleonoff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BleParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BleParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BleParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BleParam::MergeFrom(const BleParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bleinterval()) {
      set_bleinterval(from.bleinterval());
    }
    if (from.has_bletxp()) {
      set_bletxp(from.bletxp());
    }
    if (from.has_bleontime()) {
      set_bleontime(from.bleontime());
    }
    if (from.has_bleofftime()) {
      set_bleofftime(from.bleofftime());
    }
    if (from.has_bleonoff()) {
      set_bleonoff(from.bleonoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BleParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BleParam::CopyFrom(const BleParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BleParam::IsInitialized() const {

  return true;
}

void BleParam::Swap(BleParam* other) {
  if (other != this) {
    std::swap(bleinterval_, other->bleinterval_);
    std::swap(bletxp_, other->bletxp_);
    std::swap(bleontime_, other->bleontime_);
    std::swap(bleofftime_, other->bleofftime_);
    std::swap(bleonoff_, other->bleonoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BleParam_descriptor_;
  metadata.reflection = BleParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorData::kTypeFieldNumber;
const int SensorData::kDataFieldNumber;
const int SensorData::kAlarmHighFieldNumber;
const int SensorData::kAlarmLowFieldNumber;
const int SensorData::kCalibrationFieldNumber;
const int SensorData::kErrorFieldNumber;
const int SensorData::kStatusFieldNumber;
const int SensorData::kAlarmStepHighFieldNumber;
const int SensorData::kAlarmStepLowFieldNumber;
#endif  // !_MSC_VER

SensorData::SensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorData::InitAsDefaultInstance() {
}

SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = 0;
  alarmhigh_ = 0;
  alarmlow_ = 0;
  calibration_ = 0u;
  error_ = 0;
  status_ = 0u;
  alarmstephigh_ = 0;
  alarmsteplow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorData::~SensorData() {
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorData_descriptor_;
}

const SensorData& SensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

SensorData* SensorData::default_instance_ = NULL;

SensorData* SensorData::New() const {
  return new SensorData;
}

void SensorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    data_ = 0;
    alarmhigh_ = 0;
    alarmlow_ = 0;
    calibration_ = 0u;
    error_ = 0;
    status_ = 0u;
    alarmstephigh_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alarmsteplow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_alarmHigh;
        break;
      }

      // optional float alarmHigh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmhigh_)));
          set_has_alarmhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alarmLow;
        break;
      }

      // optional float alarmLow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmlow_)));
          set_has_alarmlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_calibration;
        break;
      }

      // optional uint32 calibration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_)));
          set_has_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .SensorError error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorError_IsValid(value)) {
            set_error(static_cast< ::SensorError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_alarmStepHigh;
        break;
      }

      // optional float alarmStepHigh = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmstephigh_)));
          set_has_alarmstephigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_alarmStepLow;
        break;
      }

      // optional float alarmStepLow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmsteplow_)));
          set_has_alarmsteplow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .SensorType type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorType_IsValid(value)) {
            set_type(static_cast< ::SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->data(), output);
  }

  // optional float alarmHigh = 2;
  if (has_alarmhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alarmhigh(), output);
  }

  // optional float alarmLow = 3;
  if (has_alarmlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alarmlow(), output);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->calibration(), output);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional float alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->alarmstephigh(), output);
  }

  // optional float alarmStepLow = 8;
  if (has_alarmsteplow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->alarmsteplow(), output);
  }

  // optional .SensorType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->data(), target);
  }

  // optional float alarmHigh = 2;
  if (has_alarmhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alarmhigh(), target);
  }

  // optional float alarmLow = 3;
  if (has_alarmlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alarmlow(), target);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->calibration(), target);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional float alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->alarmstephigh(), target);
  }

  // optional float alarmStepLow = 8;
  if (has_alarmsteplow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->alarmsteplow(), target);
  }

  // optional .SensorType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SensorType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float data = 1;
    if (has_data()) {
      total_size += 1 + 4;
    }

    // optional float alarmHigh = 2;
    if (has_alarmhigh()) {
      total_size += 1 + 4;
    }

    // optional float alarmLow = 3;
    if (has_alarmlow()) {
      total_size += 1 + 4;
    }

    // optional uint32 calibration = 4;
    if (has_calibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration());
    }

    // optional .SensorError error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional float alarmStepHigh = 7;
    if (has_alarmstephigh()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float alarmStepLow = 8;
    if (has_alarmsteplow()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_alarmhigh()) {
      set_alarmhigh(from.alarmhigh());
    }
    if (from.has_alarmlow()) {
      set_alarmlow(from.alarmlow());
    }
    if (from.has_calibration()) {
      set_calibration(from.calibration());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarmstephigh()) {
      set_alarmstephigh(from.alarmstephigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmsteplow()) {
      set_alarmsteplow(from.alarmsteplow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {

  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(alarmhigh_, other->alarmhigh_);
    std::swap(alarmlow_, other->alarmlow_);
    std::swap(calibration_, other->calibration_);
    std::swap(error_, other->error_);
    std::swap(status_, other->status_);
    std::swap(alarmstephigh_, other->alarmstephigh_);
    std::swap(alarmsteplow_, other->alarmsteplow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorData_descriptor_;
  metadata.reflection = SensorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorDataInt::kTypeFieldNumber;
const int SensorDataInt::kDataFieldNumber;
const int SensorDataInt::kAlarmHighFieldNumber;
const int SensorDataInt::kAlarmLowFieldNumber;
const int SensorDataInt::kCalibrationFieldNumber;
const int SensorDataInt::kErrorFieldNumber;
const int SensorDataInt::kStatusFieldNumber;
const int SensorDataInt::kAlarmStepHighFieldNumber;
const int SensorDataInt::kAlarmStepLowFieldNumber;
#endif  // !_MSC_VER

SensorDataInt::SensorDataInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorDataInt::InitAsDefaultInstance() {
}

SensorDataInt::SensorDataInt(const SensorDataInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorDataInt::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = 0;
  alarmhigh_ = 0;
  alarmlow_ = 0;
  calibration_ = 0;
  error_ = 0;
  status_ = 0u;
  alarmstephigh_ = 0;
  alarmsteplow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorDataInt::~SensorDataInt() {
  SharedDtor();
}

void SensorDataInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorDataInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDataInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorDataInt_descriptor_;
}

const SensorDataInt& SensorDataInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

SensorDataInt* SensorDataInt::default_instance_ = NULL;

SensorDataInt* SensorDataInt::New() const {
  return new SensorDataInt;
}

void SensorDataInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    data_ = 0;
    alarmhigh_ = 0;
    alarmlow_ = 0;
    calibration_ = 0;
    error_ = 0;
    status_ = 0u;
    alarmstephigh_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alarmsteplow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorDataInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorType_IsValid(value)) {
            set_type(static_cast< ::SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // optional sint32 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alarmHigh;
        break;
      }

      // optional sint32 alarmHigh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmhigh_)));
          set_has_alarmhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alarmLow;
        break;
      }

      // optional sint32 alarmLow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmlow_)));
          set_has_alarmlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_calibration;
        break;
      }

      // optional sint32 calibration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &calibration_)));
          set_has_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional .SensorError error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorError_IsValid(value)) {
            set_error(static_cast< ::SensorError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alarmStepHigh;
        break;
      }

      // optional sint32 alarmStepHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmStepHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmstephigh_)));
          set_has_alarmstephigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_alarmStepLow;
        break;
      }

      // optional sint32 alarmStepLow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmStepLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmsteplow_)));
          set_has_alarmsteplow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorDataInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional sint32 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->data(), output);
  }

  // optional sint32 alarmHigh = 3;
  if (has_alarmhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->alarmhigh(), output);
  }

  // optional sint32 alarmLow = 4;
  if (has_alarmlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->alarmlow(), output);
  }

  // optional sint32 calibration = 5;
  if (has_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->calibration(), output);
  }

  // optional .SensorError error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error(), output);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional sint32 alarmStepHigh = 8;
  if (has_alarmstephigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->alarmstephigh(), output);
  }

  // optional sint32 alarmStepLow = 9;
  if (has_alarmsteplow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->alarmsteplow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorDataInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SensorType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional sint32 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->data(), target);
  }

  // optional sint32 alarmHigh = 3;
  if (has_alarmhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->alarmhigh(), target);
  }

  // optional sint32 alarmLow = 4;
  if (has_alarmlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->alarmlow(), target);
  }

  // optional sint32 calibration = 5;
  if (has_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->calibration(), target);
  }

  // optional .SensorError error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error(), target);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional sint32 alarmStepHigh = 8;
  if (has_alarmstephigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->alarmstephigh(), target);
  }

  // optional sint32 alarmStepLow = 9;
  if (has_alarmsteplow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->alarmsteplow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorDataInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sint32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->data());
    }

    // optional sint32 alarmHigh = 3;
    if (has_alarmhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmhigh());
    }

    // optional sint32 alarmLow = 4;
    if (has_alarmlow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmlow());
    }

    // optional sint32 calibration = 5;
    if (has_calibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->calibration());
    }

    // optional .SensorError error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional sint32 alarmStepHigh = 8;
    if (has_alarmstephigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmstephigh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 alarmStepLow = 9;
    if (has_alarmsteplow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmsteplow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDataInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorDataInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorDataInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorDataInt::MergeFrom(const SensorDataInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_alarmhigh()) {
      set_alarmhigh(from.alarmhigh());
    }
    if (from.has_alarmlow()) {
      set_alarmlow(from.alarmlow());
    }
    if (from.has_calibration()) {
      set_calibration(from.calibration());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarmstephigh()) {
      set_alarmstephigh(from.alarmstephigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmsteplow()) {
      set_alarmsteplow(from.alarmsteplow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorDataInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataInt::CopyFrom(const SensorDataInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataInt::IsInitialized() const {

  return true;
}

void SensorDataInt::Swap(SensorDataInt* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(alarmhigh_, other->alarmhigh_);
    std::swap(alarmlow_, other->alarmlow_);
    std::swap(calibration_, other->calibration_);
    std::swap(error_, other->error_);
    std::swap(status_, other->status_);
    std::swap(alarmstephigh_, other->alarmstephigh_);
    std::swap(alarmsteplow_, other->alarmsteplow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorDataInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorDataInt_descriptor_;
  metadata.reflection = SensorDataInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SensorDataFloat::kTypeFieldNumber;
const int SensorDataFloat::kDataFieldNumber;
const int SensorDataFloat::kAlarmHighFieldNumber;
const int SensorDataFloat::kAlarmLowFieldNumber;
const int SensorDataFloat::kCalibrationFieldNumber;
const int SensorDataFloat::kErrorFieldNumber;
const int SensorDataFloat::kStatusFieldNumber;
const int SensorDataFloat::kAlarmStepHighFieldNumber;
const int SensorDataFloat::kAlarmStepLowFieldNumber;
#endif  // !_MSC_VER

SensorDataFloat::SensorDataFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorDataFloat::InitAsDefaultInstance() {
}

SensorDataFloat::SensorDataFloat(const SensorDataFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorDataFloat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = 0;
  alarmhigh_ = 0;
  alarmlow_ = 0;
  calibration_ = 0;
  error_ = 0;
  status_ = 0u;
  alarmstephigh_ = 0;
  alarmsteplow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorDataFloat::~SensorDataFloat() {
  SharedDtor();
}

void SensorDataFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorDataFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorDataFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorDataFloat_descriptor_;
}

const SensorDataFloat& SensorDataFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

SensorDataFloat* SensorDataFloat::default_instance_ = NULL;

SensorDataFloat* SensorDataFloat::New() const {
  return new SensorDataFloat;
}

void SensorDataFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    data_ = 0;
    alarmhigh_ = 0;
    alarmlow_ = 0;
    calibration_ = 0;
    error_ = 0;
    status_ = 0u;
    alarmstephigh_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alarmsteplow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorDataFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorType_IsValid(value)) {
            set_type(static_cast< ::SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_data;
        break;
      }

      // optional float data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alarmHigh;
        break;
      }

      // optional float alarmHigh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmhigh_)));
          set_has_alarmhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alarmLow;
        break;
      }

      // optional float alarmLow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmlow_)));
          set_has_alarmlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_calibration;
        break;
      }

      // optional sint32 calibration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &calibration_)));
          set_has_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }

      // optional .SensorError error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorError_IsValid(value)) {
            set_error(static_cast< ::SensorError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_alarmStepHigh;
        break;
      }

      // optional float alarmStepHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmstephigh_)));
          set_has_alarmstephigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_alarmStepLow;
        break;
      }

      // optional float alarmStepLow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmsteplow_)));
          set_has_alarmsteplow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorDataFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data(), output);
  }

  // optional float alarmHigh = 3;
  if (has_alarmhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alarmhigh(), output);
  }

  // optional float alarmLow = 4;
  if (has_alarmlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alarmlow(), output);
  }

  // optional sint32 calibration = 5;
  if (has_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->calibration(), output);
  }

  // optional .SensorError error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error(), output);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional float alarmStepHigh = 8;
  if (has_alarmstephigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->alarmstephigh(), output);
  }

  // optional float alarmStepLow = 9;
  if (has_alarmsteplow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->alarmsteplow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorDataFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SensorType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data(), target);
  }

  // optional float alarmHigh = 3;
  if (has_alarmhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alarmhigh(), target);
  }

  // optional float alarmLow = 4;
  if (has_alarmlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alarmlow(), target);
  }

  // optional sint32 calibration = 5;
  if (has_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->calibration(), target);
  }

  // optional .SensorError error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error(), target);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional float alarmStepHigh = 8;
  if (has_alarmstephigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->alarmstephigh(), target);
  }

  // optional float alarmStepLow = 9;
  if (has_alarmsteplow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->alarmsteplow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorDataFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float data = 2;
    if (has_data()) {
      total_size += 1 + 4;
    }

    // optional float alarmHigh = 3;
    if (has_alarmhigh()) {
      total_size += 1 + 4;
    }

    // optional float alarmLow = 4;
    if (has_alarmlow()) {
      total_size += 1 + 4;
    }

    // optional sint32 calibration = 5;
    if (has_calibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->calibration());
    }

    // optional .SensorError error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional float alarmStepHigh = 8;
    if (has_alarmstephigh()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float alarmStepLow = 9;
    if (has_alarmsteplow()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorDataFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorDataFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorDataFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorDataFloat::MergeFrom(const SensorDataFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_alarmhigh()) {
      set_alarmhigh(from.alarmhigh());
    }
    if (from.has_alarmlow()) {
      set_alarmlow(from.alarmlow());
    }
    if (from.has_calibration()) {
      set_calibration(from.calibration());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarmstephigh()) {
      set_alarmstephigh(from.alarmstephigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmsteplow()) {
      set_alarmsteplow(from.alarmsteplow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorDataFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataFloat::CopyFrom(const SensorDataFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataFloat::IsInitialized() const {

  return true;
}

void SensorDataFloat::Swap(SensorDataFloat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(alarmhigh_, other->alarmhigh_);
    std::swap(alarmlow_, other->alarmlow_);
    std::swap(calibration_, other->calibration_);
    std::swap(error_, other->error_);
    std::swap(status_, other->status_);
    std::swap(alarmstephigh_, other->alarmstephigh_);
    std::swap(alarmsteplow_, other->alarmsteplow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorDataFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorDataFloat_descriptor_;
  metadata.reflection = SensorDataFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiSensorData::kDataFieldNumber;
const int MultiSensorData::kAlarmHighFieldNumber;
const int MultiSensorData::kAlarmLowFieldNumber;
const int MultiSensorData::kCalibrationFieldNumber;
const int MultiSensorData::kErrorFieldNumber;
const int MultiSensorData::kStatusFieldNumber;
const int MultiSensorData::kAlarmStepHighFieldNumber;
const int MultiSensorData::kAlarmStepLowFieldNumber;
#endif  // !_MSC_VER

MultiSensorData::MultiSensorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiSensorData::InitAsDefaultInstance() {
}

MultiSensorData::MultiSensorData(const MultiSensorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiSensorData::SharedCtor() {
  _cached_size_ = 0;
  alarmhigh_ = 0;
  alarmlow_ = 0;
  calibration_ = 0u;
  error_ = 0;
  status_ = 0u;
  alarmstephigh_ = 0;
  alarmsteplow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiSensorData::~MultiSensorData() {
  SharedDtor();
}

void MultiSensorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiSensorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiSensorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiSensorData_descriptor_;
}

const MultiSensorData& MultiSensorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

MultiSensorData* MultiSensorData::default_instance_ = NULL;

MultiSensorData* MultiSensorData::New() const {
  return new MultiSensorData;
}

void MultiSensorData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    alarmhigh_ = 0;
    alarmlow_ = 0;
    calibration_ = 0u;
    error_ = 0;
    status_ = 0u;
    alarmstephigh_ = 0;
    alarmsteplow_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiSensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_data;
        if (input->ExpectTag(21)) goto parse_alarmHigh;
        break;
      }

      // optional float alarmHigh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmhigh_)));
          set_has_alarmhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alarmLow;
        break;
      }

      // optional float alarmLow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmlow_)));
          set_has_alarmlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_calibration;
        break;
      }

      // optional uint32 calibration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_)));
          set_has_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .SensorError error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorError_IsValid(value)) {
            set_error(static_cast< ::SensorError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_alarmStepHigh;
        break;
      }

      // optional float alarmStepHigh = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmstephigh_)));
          set_has_alarmstephigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_alarmStepLow;
        break;
      }

      // optional float alarmStepLow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alarmStepLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alarmsteplow_)));
          set_has_alarmsteplow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiSensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->data(i), output);
  }

  // optional float alarmHigh = 2;
  if (has_alarmhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->alarmhigh(), output);
  }

  // optional float alarmLow = 3;
  if (has_alarmlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alarmlow(), output);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->calibration(), output);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional float alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->alarmstephigh(), output);
  }

  // optional float alarmStepLow = 8;
  if (has_alarmsteplow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->alarmsteplow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiSensorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->data(i), target);
  }

  // optional float alarmHigh = 2;
  if (has_alarmhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->alarmhigh(), target);
  }

  // optional float alarmLow = 3;
  if (has_alarmlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alarmlow(), target);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->calibration(), target);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional float alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->alarmstephigh(), target);
  }

  // optional float alarmStepLow = 8;
  if (has_alarmsteplow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->alarmsteplow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiSensorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float alarmHigh = 2;
    if (has_alarmhigh()) {
      total_size += 1 + 4;
    }

    // optional float alarmLow = 3;
    if (has_alarmlow()) {
      total_size += 1 + 4;
    }

    // optional uint32 calibration = 4;
    if (has_calibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration());
    }

    // optional .SensorError error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional float alarmStepHigh = 7;
    if (has_alarmstephigh()) {
      total_size += 1 + 4;
    }

    // optional float alarmStepLow = 8;
    if (has_alarmsteplow()) {
      total_size += 1 + 4;
    }

  }
  // repeated float data = 1;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiSensorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiSensorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiSensorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiSensorData::MergeFrom(const MultiSensorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_alarmhigh()) {
      set_alarmhigh(from.alarmhigh());
    }
    if (from.has_alarmlow()) {
      set_alarmlow(from.alarmlow());
    }
    if (from.has_calibration()) {
      set_calibration(from.calibration());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarmstephigh()) {
      set_alarmstephigh(from.alarmstephigh());
    }
    if (from.has_alarmsteplow()) {
      set_alarmsteplow(from.alarmsteplow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiSensorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSensorData::CopyFrom(const MultiSensorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSensorData::IsInitialized() const {

  return true;
}

void MultiSensorData::Swap(MultiSensorData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(alarmhigh_, other->alarmhigh_);
    std::swap(alarmlow_, other->alarmlow_);
    std::swap(calibration_, other->calibration_);
    std::swap(error_, other->error_);
    std::swap(status_, other->status_);
    std::swap(alarmstephigh_, other->alarmstephigh_);
    std::swap(alarmsteplow_, other->alarmsteplow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiSensorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiSensorData_descriptor_;
  metadata.reflection = MultiSensorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiSensorDataInt::kDataFieldNumber;
const int MultiSensorDataInt::kAlarmHighFieldNumber;
const int MultiSensorDataInt::kAlarmLowFieldNumber;
const int MultiSensorDataInt::kCalibrationFieldNumber;
const int MultiSensorDataInt::kErrorFieldNumber;
const int MultiSensorDataInt::kStatusFieldNumber;
const int MultiSensorDataInt::kAlarmStepHighFieldNumber;
const int MultiSensorDataInt::kAlarmStepLowFieldNumber;
#endif  // !_MSC_VER

MultiSensorDataInt::MultiSensorDataInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultiSensorDataInt::InitAsDefaultInstance() {
}

MultiSensorDataInt::MultiSensorDataInt(const MultiSensorDataInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultiSensorDataInt::SharedCtor() {
  _cached_size_ = 0;
  alarmhigh_ = 0;
  alarmlow_ = 0;
  calibration_ = 0u;
  error_ = 0;
  status_ = 0u;
  alarmstephigh_ = 0;
  alarmsteplow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiSensorDataInt::~MultiSensorDataInt() {
  SharedDtor();
}

void MultiSensorDataInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiSensorDataInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiSensorDataInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiSensorDataInt_descriptor_;
}

const MultiSensorDataInt& MultiSensorDataInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

MultiSensorDataInt* MultiSensorDataInt::default_instance_ = NULL;

MultiSensorDataInt* MultiSensorDataInt::New() const {
  return new MultiSensorDataInt;
}

void MultiSensorDataInt::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    alarmhigh_ = 0;
    alarmlow_ = 0;
    calibration_ = 0u;
    error_ = 0;
    status_ = 0u;
    alarmstephigh_ = 0;
    alarmsteplow_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiSensorDataInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_alarmHigh;
        break;
      }

      // optional sint32 alarmHigh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmhigh_)));
          set_has_alarmhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alarmLow;
        break;
      }

      // optional sint32 alarmLow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmlow_)));
          set_has_alarmlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_calibration;
        break;
      }

      // optional uint32 calibration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_)));
          set_has_calibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .SensorError error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorError_IsValid(value)) {
            set_error(static_cast< ::SensorError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_alarmStepHigh;
        break;
      }

      // optional sint32 alarmStepHigh = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmStepHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmstephigh_)));
          set_has_alarmstephigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alarmStepLow;
        break;
      }

      // optional sint32 alarmStepLow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmStepLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmsteplow_)));
          set_has_alarmsteplow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultiSensorDataInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->data(i), output);
  }

  // optional sint32 alarmHigh = 2;
  if (has_alarmhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->alarmhigh(), output);
  }

  // optional sint32 alarmLow = 3;
  if (has_alarmlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->alarmlow(), output);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->calibration(), output);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional sint32 alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->alarmstephigh(), output);
  }

  // optional sint32 alarmStepLow = 8;
  if (has_alarmsteplow()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->alarmsteplow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultiSensorDataInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->data(i), target);
  }

  // optional sint32 alarmHigh = 2;
  if (has_alarmhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->alarmhigh(), target);
  }

  // optional sint32 alarmLow = 3;
  if (has_alarmlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->alarmlow(), target);
  }

  // optional uint32 calibration = 4;
  if (has_calibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->calibration(), target);
  }

  // optional .SensorError error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional sint32 alarmStepHigh = 7;
  if (has_alarmstephigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->alarmstephigh(), target);
  }

  // optional sint32 alarmStepLow = 8;
  if (has_alarmsteplow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->alarmsteplow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultiSensorDataInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 alarmHigh = 2;
    if (has_alarmhigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmhigh());
    }

    // optional sint32 alarmLow = 3;
    if (has_alarmlow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmlow());
    }

    // optional uint32 calibration = 4;
    if (has_calibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration());
    }

    // optional .SensorError error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional sint32 alarmStepHigh = 7;
    if (has_alarmstephigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmstephigh());
    }

    // optional sint32 alarmStepLow = 8;
    if (has_alarmsteplow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmsteplow());
    }

  }
  // repeated sint32 data = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiSensorDataInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiSensorDataInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiSensorDataInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiSensorDataInt::MergeFrom(const MultiSensorDataInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_alarmhigh()) {
      set_alarmhigh(from.alarmhigh());
    }
    if (from.has_alarmlow()) {
      set_alarmlow(from.alarmlow());
    }
    if (from.has_calibration()) {
      set_calibration(from.calibration());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarmstephigh()) {
      set_alarmstephigh(from.alarmstephigh());
    }
    if (from.has_alarmsteplow()) {
      set_alarmsteplow(from.alarmsteplow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiSensorDataInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSensorDataInt::CopyFrom(const MultiSensorDataInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSensorDataInt::IsInitialized() const {

  return true;
}

void MultiSensorDataInt::Swap(MultiSensorDataInt* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(alarmhigh_, other->alarmhigh_);
    std::swap(alarmlow_, other->alarmlow_);
    std::swap(calibration_, other->calibration_);
    std::swap(error_, other->error_);
    std::swap(status_, other->status_);
    std::swap(alarmstephigh_, other->alarmstephigh_);
    std::swap(alarmsteplow_, other->alarmsteplow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiSensorDataInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiSensorDataInt_descriptor_;
  metadata.reflection = MultiSensorDataInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsData::kLatitudeFieldNumber;
const int GpsData::kLongitudeFieldNumber;
const int GpsData::kAltitudeFieldNumber;
#endif  // !_MSC_VER

GpsData::GpsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpsData::InitAsDefaultInstance() {
}

GpsData::GpsData(const GpsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpsData::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsData::~GpsData() {
  SharedDtor();
}

void GpsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GpsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsData_descriptor_;
}

const GpsData& GpsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

GpsData* GpsData::default_instance_ = NULL;

GpsData* GpsData::New() const {
  return new GpsData;
}

void GpsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }

      // optional double altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsData::MergeFrom(const GpsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsData::CopyFrom(const GpsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsData::IsInitialized() const {

  return true;
}

void GpsData::Swap(GpsData* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsData_descriptor_;
  metadata.reflection = GpsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AxisData::kXFieldNumber;
const int AxisData::kYFieldNumber;
const int AxisData::kZFieldNumber;
#endif  // !_MSC_VER

AxisData::AxisData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AxisData::InitAsDefaultInstance() {
}

AxisData::AxisData(const AxisData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AxisData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AxisData::~AxisData() {
  SharedDtor();
}

void AxisData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AxisData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AxisData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AxisData_descriptor_;
}

const AxisData& AxisData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

AxisData* AxisData::default_instance_ = NULL;

AxisData* AxisData::New() const {
  return new AxisData;
}

void AxisData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AxisData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AxisData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AxisData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AxisData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AxisData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AxisData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AxisData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AxisData::MergeFrom(const AxisData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AxisData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxisData::CopyFrom(const AxisData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxisData::IsInitialized() const {

  return true;
}

void AxisData::Swap(AxisData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AxisData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AxisData_descriptor_;
  metadata.reflection = AxisData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iBeacon::kAddrFieldNumber;
const int iBeacon::kUmmFieldNumber;
const int iBeacon::kRssiFieldNumber;
#endif  // !_MSC_VER

iBeacon::iBeacon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iBeacon::InitAsDefaultInstance() {
}

iBeacon::iBeacon(const iBeacon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iBeacon::SharedCtor() {
  _cached_size_ = 0;
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  umm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rssi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iBeacon::~iBeacon() {
  SharedDtor();
}

void iBeacon::SharedDtor() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (umm_ != &::google::protobuf::internal::kEmptyString) {
    delete umm_;
  }
  if (this != default_instance_) {
  }
}

void iBeacon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iBeacon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iBeacon_descriptor_;
}

const iBeacon& iBeacon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

iBeacon* iBeacon::default_instance_ = NULL;

iBeacon* iBeacon::New() const {
  return new iBeacon;
}

void iBeacon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_umm()) {
      if (umm_ != &::google::protobuf::internal::kEmptyString) {
        umm_->clear();
      }
    }
    rssi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iBeacon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_umm;
        break;
      }

      // optional bytes umm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_umm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_umm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rssi;
        break;
      }

      // optional sint32 rssi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iBeacon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->addr(), output);
  }

  // optional bytes umm = 2;
  if (has_umm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->umm(), output);
  }

  // optional sint32 rssi = 3;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->rssi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iBeacon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes addr = 1;
  if (has_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->addr(), target);
  }

  // optional bytes umm = 2;
  if (has_umm()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->umm(), target);
  }

  // optional sint32 rssi = 3;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->rssi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iBeacon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addr());
    }

    // optional bytes umm = 2;
    if (has_umm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->umm());
    }

    // optional sint32 rssi = 3;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rssi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iBeacon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iBeacon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iBeacon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iBeacon::MergeFrom(const iBeacon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_umm()) {
      set_umm(from.umm());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iBeacon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iBeacon::CopyFrom(const iBeacon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iBeacon::IsInitialized() const {

  return true;
}

void iBeacon::Swap(iBeacon* other) {
  if (other != this) {
    std::swap(addr_, other->addr_);
    std::swap(umm_, other->umm_);
    std::swap(rssi_, other->rssi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iBeacon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iBeacon_descriptor_;
  metadata.reflection = iBeacon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtSmoke::kBgSignalFieldNumber;
const int ExtSmoke::kBgSignalThresholdFieldNumber;
const int ExtSmoke::kBgSignalCalibrationFieldNumber;
#endif  // !_MSC_VER

ExtSmoke::ExtSmoke()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtSmoke::InitAsDefaultInstance() {
}

ExtSmoke::ExtSmoke(const ExtSmoke& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtSmoke::SharedCtor() {
  _cached_size_ = 0;
  bgsignal_ = 0u;
  bgsignalthreshold_ = 0u;
  bgsignalcalibration_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtSmoke::~ExtSmoke() {
  SharedDtor();
}

void ExtSmoke::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtSmoke::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtSmoke::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtSmoke_descriptor_;
}

const ExtSmoke& ExtSmoke::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

ExtSmoke* ExtSmoke::default_instance_ = NULL;

ExtSmoke* ExtSmoke::New() const {
  return new ExtSmoke;
}

void ExtSmoke::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bgsignal_ = 0u;
    bgsignalthreshold_ = 0u;
    bgsignalcalibration_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtSmoke::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bgSignal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgsignal_)));
          set_has_bgsignal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bgSignalThreshold;
        break;
      }

      // optional uint32 bgSignalThreshold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgSignalThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgsignalthreshold_)));
          set_has_bgsignalthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bgSignalCalibration;
        break;
      }

      // optional uint32 bgSignalCalibration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgSignalCalibration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bgsignalcalibration_)));
          set_has_bgsignalcalibration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtSmoke::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bgSignal = 1;
  if (has_bgsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bgsignal(), output);
  }

  // optional uint32 bgSignalThreshold = 2;
  if (has_bgsignalthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bgsignalthreshold(), output);
  }

  // optional uint32 bgSignalCalibration = 3;
  if (has_bgsignalcalibration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bgsignalcalibration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtSmoke::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bgSignal = 1;
  if (has_bgsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bgsignal(), target);
  }

  // optional uint32 bgSignalThreshold = 2;
  if (has_bgsignalthreshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bgsignalthreshold(), target);
  }

  // optional uint32 bgSignalCalibration = 3;
  if (has_bgsignalcalibration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bgsignalcalibration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtSmoke::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bgSignal = 1;
    if (has_bgsignal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgsignal());
    }

    // optional uint32 bgSignalThreshold = 2;
    if (has_bgsignalthreshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgsignalthreshold());
    }

    // optional uint32 bgSignalCalibration = 3;
    if (has_bgsignalcalibration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bgsignalcalibration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtSmoke::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtSmoke* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtSmoke*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtSmoke::MergeFrom(const ExtSmoke& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bgsignal()) {
      set_bgsignal(from.bgsignal());
    }
    if (from.has_bgsignalthreshold()) {
      set_bgsignalthreshold(from.bgsignalthreshold());
    }
    if (from.has_bgsignalcalibration()) {
      set_bgsignalcalibration(from.bgsignalcalibration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtSmoke::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtSmoke::CopyFrom(const ExtSmoke& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtSmoke::IsInitialized() const {

  return true;
}

void ExtSmoke::Swap(ExtSmoke* other) {
  if (other != this) {
    std::swap(bgsignal_, other->bgsignal_);
    std::swap(bgsignalthreshold_, other->bgsignalthreshold_);
    std::swap(bgsignalcalibration_, other->bgsignalcalibration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtSmoke::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtSmoke_descriptor_;
  metadata.reflection = ExtSmoke_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppParam::kCmdFieldNumber;
const int AppParam::kUploadIntervalFieldNumber;
const int AppParam::kSyncTimeFieldNumber;
const int AppParam::kNodeStateFieldNumber;
const int AppParam::kNodeAlarmFieldNumber;
const int AppParam::kNodeAlarmSetFieldNumber;
const int AppParam::kConfirmFieldNumber;
const int AppParam::kSmokeCtrlFieldNumber;
const int AppParam::kUploadRepeatFieldNumber;
const int AppParam::kAlarmUploadIntervalFieldNumber;
const int AppParam::kAlarmUploadNbFieldNumber;
const int AppParam::kTrackerCtrlFieldNumber;
const int AppParam::kTrackerEmergencyTimeFieldNumber;
#endif  // !_MSC_VER

AppParam::AppParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppParam::InitAsDefaultInstance() {
}

AppParam::AppParam(const AppParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppParam::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  uploadinterval_ = 0u;
  synctime_ = 0u;
  nodestate_ = 0;
  nodealarm_ = 0;
  nodealarmset_ = 0u;
  confirm_ = 0u;
  smokectrl_ = 0;
  uploadrepeat_ = 0u;
  alarmuploadinterval_ = 0u;
  alarmuploadnb_ = 0u;
  trackerctrl_ = 0;
  trackeremergencytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppParam::~AppParam() {
  SharedDtor();
}

void AppParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppParam_descriptor_;
}

const AppParam& AppParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

AppParam* AppParam::default_instance_ = NULL;

AppParam* AppParam::New() const {
  return new AppParam;
}

void AppParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    uploadinterval_ = 0u;
    synctime_ = 0u;
    nodestate_ = 0;
    nodealarm_ = 0;
    nodealarmset_ = 0u;
    confirm_ = 0u;
    smokectrl_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uploadrepeat_ = 0u;
    alarmuploadinterval_ = 0u;
    alarmuploadnb_ = 0u;
    trackerctrl_ = 0;
    trackeremergencytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AppCmd cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AppCmd_IsValid(value)) {
            set_cmd(static_cast< ::AppCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uploadInterval;
        break;
      }

      // optional uint32 uploadInterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uploadinterval_)));
          set_has_uploadinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_syncTime;
        break;
      }

      // optional uint32 syncTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syncTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &synctime_)));
          set_has_synctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nodeState;
        break;
      }

      // optional .NodeState nodeState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeState_IsValid(value)) {
            set_nodestate(static_cast< ::NodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nodeAlarm;
        break;
      }

      // optional .NodeAlarm nodeAlarm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeAlarm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeAlarm_IsValid(value)) {
            set_nodealarm(static_cast< ::NodeAlarm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nodeAlarmSet;
        break;
      }

      // optional uint32 nodeAlarmSet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodeAlarmSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodealarmset_)));
          set_has_nodealarmset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_confirm;
        break;
      }

      // optional uint32 confirm = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confirm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confirm_)));
          set_has_confirm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_smokeCtrl;
        break;
      }

      // optional .SmokeCtrl smokeCtrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smokeCtrl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SmokeCtrl_IsValid(value)) {
            set_smokectrl(static_cast< ::SmokeCtrl >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_uploadRepeat;
        break;
      }

      // optional uint32 uploadRepeat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uploadrepeat_)));
          set_has_uploadrepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_alarmUploadInterval;
        break;
      }

      // optional uint32 alarmUploadInterval = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmUploadInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarmuploadinterval_)));
          set_has_alarmuploadinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_alarmUploadNb;
        break;
      }

      // optional uint32 alarmUploadNb = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmUploadNb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarmuploadnb_)));
          set_has_alarmuploadnb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trackerCtrl;
        break;
      }

      // optional .TrackerCtrl trackerCtrl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackerCtrl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TrackerCtrl_IsValid(value)) {
            set_trackerctrl(static_cast< ::TrackerCtrl >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_trackerEmergencyTime;
        break;
      }

      // optional uint32 trackerEmergencyTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackerEmergencyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trackeremergencytime_)));
          set_has_trackeremergencytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AppCmd cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional uint32 uploadInterval = 2;
  if (has_uploadinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uploadinterval(), output);
  }

  // optional uint32 syncTime = 3;
  if (has_synctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->synctime(), output);
  }

  // optional .NodeState nodeState = 4;
  if (has_nodestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nodestate(), output);
  }

  // optional .NodeAlarm nodeAlarm = 5;
  if (has_nodealarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->nodealarm(), output);
  }

  // optional uint32 nodeAlarmSet = 6;
  if (has_nodealarmset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nodealarmset(), output);
  }

  // optional uint32 confirm = 7;
  if (has_confirm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->confirm(), output);
  }

  // optional .SmokeCtrl smokeCtrl = 8;
  if (has_smokectrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->smokectrl(), output);
  }

  // optional uint32 uploadRepeat = 9;
  if (has_uploadrepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uploadrepeat(), output);
  }

  // optional uint32 alarmUploadInterval = 10;
  if (has_alarmuploadinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->alarmuploadinterval(), output);
  }

  // optional uint32 alarmUploadNb = 11;
  if (has_alarmuploadnb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->alarmuploadnb(), output);
  }

  // optional .TrackerCtrl trackerCtrl = 12;
  if (has_trackerctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->trackerctrl(), output);
  }

  // optional uint32 trackerEmergencyTime = 13;
  if (has_trackeremergencytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->trackeremergencytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AppCmd cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional uint32 uploadInterval = 2;
  if (has_uploadinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uploadinterval(), target);
  }

  // optional uint32 syncTime = 3;
  if (has_synctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->synctime(), target);
  }

  // optional .NodeState nodeState = 4;
  if (has_nodestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nodestate(), target);
  }

  // optional .NodeAlarm nodeAlarm = 5;
  if (has_nodealarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->nodealarm(), target);
  }

  // optional uint32 nodeAlarmSet = 6;
  if (has_nodealarmset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nodealarmset(), target);
  }

  // optional uint32 confirm = 7;
  if (has_confirm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->confirm(), target);
  }

  // optional .SmokeCtrl smokeCtrl = 8;
  if (has_smokectrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->smokectrl(), target);
  }

  // optional uint32 uploadRepeat = 9;
  if (has_uploadrepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uploadrepeat(), target);
  }

  // optional uint32 alarmUploadInterval = 10;
  if (has_alarmuploadinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->alarmuploadinterval(), target);
  }

  // optional uint32 alarmUploadNb = 11;
  if (has_alarmuploadnb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->alarmuploadnb(), target);
  }

  // optional .TrackerCtrl trackerCtrl = 12;
  if (has_trackerctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->trackerctrl(), target);
  }

  // optional uint32 trackerEmergencyTime = 13;
  if (has_trackeremergencytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->trackeremergencytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AppCmd cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional uint32 uploadInterval = 2;
    if (has_uploadinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uploadinterval());
    }

    // optional uint32 syncTime = 3;
    if (has_synctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->synctime());
    }

    // optional .NodeState nodeState = 4;
    if (has_nodestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nodestate());
    }

    // optional .NodeAlarm nodeAlarm = 5;
    if (has_nodealarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nodealarm());
    }

    // optional uint32 nodeAlarmSet = 6;
    if (has_nodealarmset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodealarmset());
    }

    // optional uint32 confirm = 7;
    if (has_confirm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confirm());
    }

    // optional .SmokeCtrl smokeCtrl = 8;
    if (has_smokectrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->smokectrl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 uploadRepeat = 9;
    if (has_uploadrepeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uploadrepeat());
    }

    // optional uint32 alarmUploadInterval = 10;
    if (has_alarmuploadinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarmuploadinterval());
    }

    // optional uint32 alarmUploadNb = 11;
    if (has_alarmuploadnb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarmuploadnb());
    }

    // optional .TrackerCtrl trackerCtrl = 12;
    if (has_trackerctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackerctrl());
    }

    // optional uint32 trackerEmergencyTime = 13;
    if (has_trackeremergencytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trackeremergencytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppParam::MergeFrom(const AppParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_uploadinterval()) {
      set_uploadinterval(from.uploadinterval());
    }
    if (from.has_synctime()) {
      set_synctime(from.synctime());
    }
    if (from.has_nodestate()) {
      set_nodestate(from.nodestate());
    }
    if (from.has_nodealarm()) {
      set_nodealarm(from.nodealarm());
    }
    if (from.has_nodealarmset()) {
      set_nodealarmset(from.nodealarmset());
    }
    if (from.has_confirm()) {
      set_confirm(from.confirm());
    }
    if (from.has_smokectrl()) {
      set_smokectrl(from.smokectrl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uploadrepeat()) {
      set_uploadrepeat(from.uploadrepeat());
    }
    if (from.has_alarmuploadinterval()) {
      set_alarmuploadinterval(from.alarmuploadinterval());
    }
    if (from.has_alarmuploadnb()) {
      set_alarmuploadnb(from.alarmuploadnb());
    }
    if (from.has_trackerctrl()) {
      set_trackerctrl(from.trackerctrl());
    }
    if (from.has_trackeremergencytime()) {
      set_trackeremergencytime(from.trackeremergencytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppParam::CopyFrom(const AppParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppParam::IsInitialized() const {

  return true;
}

void AppParam::Swap(AppParam* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(uploadinterval_, other->uploadinterval_);
    std::swap(synctime_, other->synctime_);
    std::swap(nodestate_, other->nodestate_);
    std::swap(nodealarm_, other->nodealarm_);
    std::swap(nodealarmset_, other->nodealarmset_);
    std::swap(confirm_, other->confirm_);
    std::swap(smokectrl_, other->smokectrl_);
    std::swap(uploadrepeat_, other->uploadrepeat_);
    std::swap(alarmuploadinterval_, other->alarmuploadinterval_);
    std::swap(alarmuploadnb_, other->alarmuploadnb_);
    std::swap(trackerctrl_, other->trackerctrl_);
    std::swap(trackeremergencytime_, other->trackeremergencytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppParam_descriptor_;
  metadata.reflection = AppParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElecFireData::kVolValFieldNumber;
const int ElecFireData::kCurrValFieldNumber;
const int ElecFireData::kLeakageValFieldNumber;
const int ElecFireData::kPowerValFieldNumber;
const int ElecFireData::kElecEnergyValFieldNumber;
const int ElecFireData::kTempValFieldNumber;
const int ElecFireData::kStatusFieldNumber;
const int ElecFireData::kAlarmFieldNumber;
const int ElecFireData::kErrorFieldNumber;
const int ElecFireData::kSensorPwdFieldNumber;
const int ElecFireData::kLeakageThFieldNumber;
const int ElecFireData::kTempThFieldNumber;
const int ElecFireData::kCurrentThFieldNumber;
const int ElecFireData::kLoadThFieldNumber;
const int ElecFireData::kVolHighThFieldNumber;
const int ElecFireData::kVolLowThFieldNumber;
const int ElecFireData::kCmdFieldNumber;
const int ElecFireData::kAutoSwitchFieldNumber;
#endif  // !_MSC_VER

ElecFireData::ElecFireData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElecFireData::InitAsDefaultInstance() {
}

ElecFireData::ElecFireData(const ElecFireData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElecFireData::SharedCtor() {
  _cached_size_ = 0;
  vol_val_ = 0;
  curr_val_ = 0u;
  leakage_val_ = 0;
  power_val_ = 0u;
  elec_energy_val_ = 0u;
  temp_val_ = 0u;
  status_ = 0u;
  alarm_ = 0u;
  error_ = 0u;
  sensorpwd_ = 0u;
  leakageth_ = 0u;
  tempth_ = 0u;
  currentth_ = 0u;
  loadth_ = 0u;
  volhighth_ = 0u;
  vollowth_ = 0u;
  cmd_ = 0u;
  autoswitch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElecFireData::~ElecFireData() {
  SharedDtor();
}

void ElecFireData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElecFireData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElecFireData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElecFireData_descriptor_;
}

const ElecFireData& ElecFireData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

ElecFireData* ElecFireData::default_instance_ = NULL;

ElecFireData* ElecFireData::New() const {
  return new ElecFireData;
}

void ElecFireData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vol_val_ = 0;
    curr_val_ = 0u;
    leakage_val_ = 0;
    power_val_ = 0u;
    elec_energy_val_ = 0u;
    temp_val_ = 0u;
    status_ = 0u;
    alarm_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    error_ = 0u;
    sensorpwd_ = 0u;
    leakageth_ = 0u;
    tempth_ = 0u;
    currentth_ = 0u;
    loadth_ = 0u;
    volhighth_ = 0u;
    vollowth_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cmd_ = 0u;
    autoswitch_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElecFireData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 vol_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &vol_val_)));
          set_has_vol_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curr_val;
        break;
      }

      // optional uint32 curr_val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_val_)));
          set_has_curr_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leakage_val;
        break;
      }

      // optional sint32 leakage_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakage_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &leakage_val_)));
          set_has_leakage_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_power_val;
        break;
      }

      // optional uint32 power_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_val_)));
          set_has_power_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_elec_energy_val;
        break;
      }

      // optional uint32 elec_energy_val = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elec_energy_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elec_energy_val_)));
          set_has_elec_energy_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_temp_val;
        break;
      }

      // optional uint32 temp_val = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_val_)));
          set_has_temp_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alarm;
        break;
      }

      // optional uint32 alarm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarm_)));
          set_has_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_error;
        break;
      }

      // optional uint32 error = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sensorPwd;
        break;
      }

      // optional uint32 sensorPwd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensorPwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensorpwd_)));
          set_has_sensorpwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_leakageTh;
        break;
      }

      // optional uint32 leakageTh = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakageTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leakageth_)));
          set_has_leakageth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tempTh;
        break;
      }

      // optional uint32 tempTh = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempth_)));
          set_has_tempth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_currentTh;
        break;
      }

      // optional uint32 currentTh = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentth_)));
          set_has_currentth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_loadTh;
        break;
      }

      // optional uint32 loadTh = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loadTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loadth_)));
          set_has_loadth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_volHighTh;
        break;
      }

      // optional uint32 volHighTh = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volHighTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volhighth_)));
          set_has_volhighth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_volLowTh;
        break;
      }

      // optional uint32 volLowTh = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volLowTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vollowth_)));
          set_has_vollowth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_autoSwitch;
        break;
      }

      // optional uint32 autoSwitch = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autoswitch_)));
          set_has_autoswitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElecFireData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 vol_val = 1;
  if (has_vol_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->vol_val(), output);
  }

  // optional uint32 curr_val = 2;
  if (has_curr_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curr_val(), output);
  }

  // optional sint32 leakage_val = 3;
  if (has_leakage_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->leakage_val(), output);
  }

  // optional uint32 power_val = 4;
  if (has_power_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->power_val(), output);
  }

  // optional uint32 elec_energy_val = 5;
  if (has_elec_energy_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->elec_energy_val(), output);
  }

  // optional uint32 temp_val = 6;
  if (has_temp_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->temp_val(), output);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 alarm = 8;
  if (has_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->alarm(), output);
  }

  // optional uint32 error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->error(), output);
  }

  // optional uint32 sensorPwd = 10;
  if (has_sensorpwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sensorpwd(), output);
  }

  // optional uint32 leakageTh = 11;
  if (has_leakageth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->leakageth(), output);
  }

  // optional uint32 tempTh = 12;
  if (has_tempth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tempth(), output);
  }

  // optional uint32 currentTh = 13;
  if (has_currentth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->currentth(), output);
  }

  // optional uint32 loadTh = 14;
  if (has_loadth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->loadth(), output);
  }

  // optional uint32 volHighTh = 15;
  if (has_volhighth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->volhighth(), output);
  }

  // optional uint32 volLowTh = 16;
  if (has_vollowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->vollowth(), output);
  }

  // optional uint32 cmd = 17;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cmd(), output);
  }

  // optional uint32 autoSwitch = 18;
  if (has_autoswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->autoswitch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElecFireData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 vol_val = 1;
  if (has_vol_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->vol_val(), target);
  }

  // optional uint32 curr_val = 2;
  if (has_curr_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curr_val(), target);
  }

  // optional sint32 leakage_val = 3;
  if (has_leakage_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->leakage_val(), target);
  }

  // optional uint32 power_val = 4;
  if (has_power_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->power_val(), target);
  }

  // optional uint32 elec_energy_val = 5;
  if (has_elec_energy_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->elec_energy_val(), target);
  }

  // optional uint32 temp_val = 6;
  if (has_temp_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->temp_val(), target);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 alarm = 8;
  if (has_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->alarm(), target);
  }

  // optional uint32 error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->error(), target);
  }

  // optional uint32 sensorPwd = 10;
  if (has_sensorpwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sensorpwd(), target);
  }

  // optional uint32 leakageTh = 11;
  if (has_leakageth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->leakageth(), target);
  }

  // optional uint32 tempTh = 12;
  if (has_tempth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tempth(), target);
  }

  // optional uint32 currentTh = 13;
  if (has_currentth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->currentth(), target);
  }

  // optional uint32 loadTh = 14;
  if (has_loadth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->loadth(), target);
  }

  // optional uint32 volHighTh = 15;
  if (has_volhighth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->volhighth(), target);
  }

  // optional uint32 volLowTh = 16;
  if (has_vollowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->vollowth(), target);
  }

  // optional uint32 cmd = 17;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cmd(), target);
  }

  // optional uint32 autoSwitch = 18;
  if (has_autoswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->autoswitch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElecFireData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 vol_val = 1;
    if (has_vol_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->vol_val());
    }

    // optional uint32 curr_val = 2;
    if (has_curr_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_val());
    }

    // optional sint32 leakage_val = 3;
    if (has_leakage_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->leakage_val());
    }

    // optional uint32 power_val = 4;
    if (has_power_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_val());
    }

    // optional uint32 elec_energy_val = 5;
    if (has_elec_energy_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elec_energy_val());
    }

    // optional uint32 temp_val = 6;
    if (has_temp_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp_val());
    }

    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 alarm = 8;
    if (has_alarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarm());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error());
    }

    // optional uint32 sensorPwd = 10;
    if (has_sensorpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensorpwd());
    }

    // optional uint32 leakageTh = 11;
    if (has_leakageth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leakageth());
    }

    // optional uint32 tempTh = 12;
    if (has_tempth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempth());
    }

    // optional uint32 currentTh = 13;
    if (has_currentth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentth());
    }

    // optional uint32 loadTh = 14;
    if (has_loadth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loadth());
    }

    // optional uint32 volHighTh = 15;
    if (has_volhighth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volhighth());
    }

    // optional uint32 volLowTh = 16;
    if (has_vollowth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vollowth());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 cmd = 17;
    if (has_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 autoSwitch = 18;
    if (has_autoswitch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->autoswitch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElecFireData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElecFireData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElecFireData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElecFireData::MergeFrom(const ElecFireData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vol_val()) {
      set_vol_val(from.vol_val());
    }
    if (from.has_curr_val()) {
      set_curr_val(from.curr_val());
    }
    if (from.has_leakage_val()) {
      set_leakage_val(from.leakage_val());
    }
    if (from.has_power_val()) {
      set_power_val(from.power_val());
    }
    if (from.has_elec_energy_val()) {
      set_elec_energy_val(from.elec_energy_val());
    }
    if (from.has_temp_val()) {
      set_temp_val(from.temp_val());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_alarm()) {
      set_alarm(from.alarm());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_sensorpwd()) {
      set_sensorpwd(from.sensorpwd());
    }
    if (from.has_leakageth()) {
      set_leakageth(from.leakageth());
    }
    if (from.has_tempth()) {
      set_tempth(from.tempth());
    }
    if (from.has_currentth()) {
      set_currentth(from.currentth());
    }
    if (from.has_loadth()) {
      set_loadth(from.loadth());
    }
    if (from.has_volhighth()) {
      set_volhighth(from.volhighth());
    }
    if (from.has_vollowth()) {
      set_vollowth(from.vollowth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_autoswitch()) {
      set_autoswitch(from.autoswitch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElecFireData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElecFireData::CopyFrom(const ElecFireData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElecFireData::IsInitialized() const {

  return true;
}

void ElecFireData::Swap(ElecFireData* other) {
  if (other != this) {
    std::swap(vol_val_, other->vol_val_);
    std::swap(curr_val_, other->curr_val_);
    std::swap(leakage_val_, other->leakage_val_);
    std::swap(power_val_, other->power_val_);
    std::swap(elec_energy_val_, other->elec_energy_val_);
    std::swap(temp_val_, other->temp_val_);
    std::swap(status_, other->status_);
    std::swap(alarm_, other->alarm_);
    std::swap(error_, other->error_);
    std::swap(sensorpwd_, other->sensorpwd_);
    std::swap(leakageth_, other->leakageth_);
    std::swap(tempth_, other->tempth_);
    std::swap(currentth_, other->currentth_);
    std::swap(loadth_, other->loadth_);
    std::swap(volhighth_, other->volhighth_);
    std::swap(vollowth_, other->vollowth_);
    std::swap(cmd_, other->cmd_);
    std::swap(autoswitch_, other->autoswitch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElecFireData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElecFireData_descriptor_;
  metadata.reflection = ElecFireData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MantunData::kVolValFieldNumber;
const int MantunData::kCurrValFieldNumber;
const int MantunData::kLeakageValFieldNumber;
const int MantunData::kPowerValFieldNumber;
const int MantunData::kKwhValFieldNumber;
const int MantunData::kTempValFieldNumber;
const int MantunData::kStatusFieldNumber;
const int MantunData::kSwOnOffFieldNumber;
const int MantunData::kTemp1OutsideFieldNumber;
const int MantunData::kTemp2ContactFieldNumber;
const int MantunData::kVolHighThFieldNumber;
const int MantunData::kVolLowThFieldNumber;
const int MantunData::kLeakageThFieldNumber;
const int MantunData::kTempThFieldNumber;
const int MantunData::kCurrentThFieldNumber;
const int MantunData::kPowerThFieldNumber;
const int MantunData::kTemp1OutsideThFieldNumber;
const int MantunData::kTemp2ContactThFieldNumber;
const int MantunData::kAttributeFieldNumber;
const int MantunData::kCmdFieldNumber;
const int MantunData::kWarningFieldNumber;
#endif  // !_MSC_VER

MantunData::MantunData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MantunData::InitAsDefaultInstance() {
}

MantunData::MantunData(const MantunData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MantunData::SharedCtor() {
  _cached_size_ = 0;
  volval_ = 0u;
  currval_ = 0u;
  leakageval_ = 0u;
  powerval_ = 0u;
  kwhval_ = 0u;
  tempval_ = 0u;
  status_ = 0u;
  swonoff_ = 0u;
  temp1outside_ = 0u;
  temp2contact_ = 0u;
  volhighth_ = 0u;
  vollowth_ = 0u;
  leakageth_ = 0u;
  tempth_ = 0u;
  currentth_ = 0u;
  powerth_ = 0u;
  temp1outsideth_ = 0u;
  temp2contactth_ = 0u;
  attribute_ = 0u;
  cmd_ = 0u;
  warning_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MantunData::~MantunData() {
  SharedDtor();
}

void MantunData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MantunData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MantunData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MantunData_descriptor_;
}

const MantunData& MantunData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

MantunData* MantunData::default_instance_ = NULL;

MantunData* MantunData::New() const {
  return new MantunData;
}

void MantunData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volval_ = 0u;
    currval_ = 0u;
    leakageval_ = 0u;
    powerval_ = 0u;
    kwhval_ = 0u;
    tempval_ = 0u;
    status_ = 0u;
    swonoff_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    temp1outside_ = 0u;
    temp2contact_ = 0u;
    volhighth_ = 0u;
    vollowth_ = 0u;
    leakageth_ = 0u;
    tempth_ = 0u;
    currentth_ = 0u;
    powerth_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    temp1outsideth_ = 0u;
    temp2contactth_ = 0u;
    attribute_ = 0u;
    cmd_ = 0u;
    warning_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MantunData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 volVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volval_)));
          set_has_volval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currVal;
        break;
      }

      // optional uint32 currVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currval_)));
          set_has_currval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leakageVal;
        break;
      }

      // optional uint32 leakageVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakageVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leakageval_)));
          set_has_leakageval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_powerVal;
        break;
      }

      // optional uint32 powerVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerval_)));
          set_has_powerval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kwhVal;
        break;
      }

      // optional uint32 kwhVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kwhVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kwhval_)));
          set_has_kwhval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tempVal;
        break;
      }

      // optional uint32 tempVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempval_)));
          set_has_tempval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional uint32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_swOnOff;
        break;
      }

      // optional uint32 swOnOff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swOnOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swonoff_)));
          set_has_swonoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_temp1Outside;
        break;
      }

      // optional uint32 temp1Outside = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp1Outside:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp1outside_)));
          set_has_temp1outside();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_temp2Contact;
        break;
      }

      // optional uint32 temp2Contact = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp2Contact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp2contact_)));
          set_has_temp2contact();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_volHighTh;
        break;
      }

      // optional uint32 volHighTh = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volHighTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volhighth_)));
          set_has_volhighth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_volLowTh;
        break;
      }

      // optional uint32 volLowTh = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volLowTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vollowth_)));
          set_has_vollowth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_leakageTh;
        break;
      }

      // optional uint32 leakageTh = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakageTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leakageth_)));
          set_has_leakageth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tempTh;
        break;
      }

      // optional uint32 tempTh = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempth_)));
          set_has_tempth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_currentTh;
        break;
      }

      // optional uint32 currentTh = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentth_)));
          set_has_currentth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_powerTh;
        break;
      }

      // optional uint32 powerTh = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerth_)));
          set_has_powerth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_temp1OutsideTh;
        break;
      }

      // optional uint32 temp1OutsideTh = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp1OutsideTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp1outsideth_)));
          set_has_temp1outsideth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_temp2ContactTh;
        break;
      }

      // optional uint32 temp2ContactTh = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp2ContactTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp2contactth_)));
          set_has_temp2contactth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_attribute;
        break;
      }

      // optional uint32 attribute = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_warning;
        break;
      }

      // optional uint32 warning = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warning_)));
          set_has_warning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MantunData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 volVal = 1;
  if (has_volval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->volval(), output);
  }

  // optional uint32 currVal = 2;
  if (has_currval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->currval(), output);
  }

  // optional uint32 leakageVal = 3;
  if (has_leakageval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leakageval(), output);
  }

  // optional uint32 powerVal = 4;
  if (has_powerval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->powerval(), output);
  }

  // optional uint32 kwhVal = 5;
  if (has_kwhval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kwhval(), output);
  }

  // optional uint32 tempVal = 6;
  if (has_tempval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tempval(), output);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 swOnOff = 8;
  if (has_swonoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->swonoff(), output);
  }

  // optional uint32 temp1Outside = 9;
  if (has_temp1outside()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->temp1outside(), output);
  }

  // optional uint32 temp2Contact = 10;
  if (has_temp2contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->temp2contact(), output);
  }

  // optional uint32 volHighTh = 11;
  if (has_volhighth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->volhighth(), output);
  }

  // optional uint32 volLowTh = 12;
  if (has_vollowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->vollowth(), output);
  }

  // optional uint32 leakageTh = 13;
  if (has_leakageth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->leakageth(), output);
  }

  // optional uint32 tempTh = 14;
  if (has_tempth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tempth(), output);
  }

  // optional uint32 currentTh = 15;
  if (has_currentth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->currentth(), output);
  }

  // optional uint32 powerTh = 16;
  if (has_powerth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->powerth(), output);
  }

  // optional uint32 temp1OutsideTh = 17;
  if (has_temp1outsideth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->temp1outsideth(), output);
  }

  // optional uint32 temp2ContactTh = 18;
  if (has_temp2contactth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->temp2contactth(), output);
  }

  // optional uint32 attribute = 19;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->attribute(), output);
  }

  // optional uint32 cmd = 20;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cmd(), output);
  }

  // optional uint32 warning = 21;
  if (has_warning()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->warning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MantunData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 volVal = 1;
  if (has_volval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->volval(), target);
  }

  // optional uint32 currVal = 2;
  if (has_currval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->currval(), target);
  }

  // optional uint32 leakageVal = 3;
  if (has_leakageval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leakageval(), target);
  }

  // optional uint32 powerVal = 4;
  if (has_powerval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->powerval(), target);
  }

  // optional uint32 kwhVal = 5;
  if (has_kwhval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kwhval(), target);
  }

  // optional uint32 tempVal = 6;
  if (has_tempval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tempval(), target);
  }

  // optional uint32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 swOnOff = 8;
  if (has_swonoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->swonoff(), target);
  }

  // optional uint32 temp1Outside = 9;
  if (has_temp1outside()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->temp1outside(), target);
  }

  // optional uint32 temp2Contact = 10;
  if (has_temp2contact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->temp2contact(), target);
  }

  // optional uint32 volHighTh = 11;
  if (has_volhighth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->volhighth(), target);
  }

  // optional uint32 volLowTh = 12;
  if (has_vollowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->vollowth(), target);
  }

  // optional uint32 leakageTh = 13;
  if (has_leakageth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->leakageth(), target);
  }

  // optional uint32 tempTh = 14;
  if (has_tempth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tempth(), target);
  }

  // optional uint32 currentTh = 15;
  if (has_currentth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->currentth(), target);
  }

  // optional uint32 powerTh = 16;
  if (has_powerth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->powerth(), target);
  }

  // optional uint32 temp1OutsideTh = 17;
  if (has_temp1outsideth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->temp1outsideth(), target);
  }

  // optional uint32 temp2ContactTh = 18;
  if (has_temp2contactth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->temp2contactth(), target);
  }

  // optional uint32 attribute = 19;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->attribute(), target);
  }

  // optional uint32 cmd = 20;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cmd(), target);
  }

  // optional uint32 warning = 21;
  if (has_warning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->warning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MantunData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 volVal = 1;
    if (has_volval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volval());
    }

    // optional uint32 currVal = 2;
    if (has_currval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currval());
    }

    // optional uint32 leakageVal = 3;
    if (has_leakageval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leakageval());
    }

    // optional uint32 powerVal = 4;
    if (has_powerval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->powerval());
    }

    // optional uint32 kwhVal = 5;
    if (has_kwhval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kwhval());
    }

    // optional uint32 tempVal = 6;
    if (has_tempval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempval());
    }

    // optional uint32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 swOnOff = 8;
    if (has_swonoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swonoff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 temp1Outside = 9;
    if (has_temp1outside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp1outside());
    }

    // optional uint32 temp2Contact = 10;
    if (has_temp2contact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp2contact());
    }

    // optional uint32 volHighTh = 11;
    if (has_volhighth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volhighth());
    }

    // optional uint32 volLowTh = 12;
    if (has_vollowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vollowth());
    }

    // optional uint32 leakageTh = 13;
    if (has_leakageth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leakageth());
    }

    // optional uint32 tempTh = 14;
    if (has_tempth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempth());
    }

    // optional uint32 currentTh = 15;
    if (has_currentth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentth());
    }

    // optional uint32 powerTh = 16;
    if (has_powerth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->powerth());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 temp1OutsideTh = 17;
    if (has_temp1outsideth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp1outsideth());
    }

    // optional uint32 temp2ContactTh = 18;
    if (has_temp2contactth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp2contactth());
    }

    // optional uint32 attribute = 19;
    if (has_attribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute());
    }

    // optional uint32 cmd = 20;
    if (has_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 warning = 21;
    if (has_warning()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MantunData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MantunData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MantunData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MantunData::MergeFrom(const MantunData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volval()) {
      set_volval(from.volval());
    }
    if (from.has_currval()) {
      set_currval(from.currval());
    }
    if (from.has_leakageval()) {
      set_leakageval(from.leakageval());
    }
    if (from.has_powerval()) {
      set_powerval(from.powerval());
    }
    if (from.has_kwhval()) {
      set_kwhval(from.kwhval());
    }
    if (from.has_tempval()) {
      set_tempval(from.tempval());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_swonoff()) {
      set_swonoff(from.swonoff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_temp1outside()) {
      set_temp1outside(from.temp1outside());
    }
    if (from.has_temp2contact()) {
      set_temp2contact(from.temp2contact());
    }
    if (from.has_volhighth()) {
      set_volhighth(from.volhighth());
    }
    if (from.has_vollowth()) {
      set_vollowth(from.vollowth());
    }
    if (from.has_leakageth()) {
      set_leakageth(from.leakageth());
    }
    if (from.has_tempth()) {
      set_tempth(from.tempth());
    }
    if (from.has_currentth()) {
      set_currentth(from.currentth());
    }
    if (from.has_powerth()) {
      set_powerth(from.powerth());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_temp1outsideth()) {
      set_temp1outsideth(from.temp1outsideth());
    }
    if (from.has_temp2contactth()) {
      set_temp2contactth(from.temp2contactth());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_warning()) {
      set_warning(from.warning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MantunData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MantunData::CopyFrom(const MantunData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MantunData::IsInitialized() const {

  return true;
}

void MantunData::Swap(MantunData* other) {
  if (other != this) {
    std::swap(volval_, other->volval_);
    std::swap(currval_, other->currval_);
    std::swap(leakageval_, other->leakageval_);
    std::swap(powerval_, other->powerval_);
    std::swap(kwhval_, other->kwhval_);
    std::swap(tempval_, other->tempval_);
    std::swap(status_, other->status_);
    std::swap(swonoff_, other->swonoff_);
    std::swap(temp1outside_, other->temp1outside_);
    std::swap(temp2contact_, other->temp2contact_);
    std::swap(volhighth_, other->volhighth_);
    std::swap(vollowth_, other->vollowth_);
    std::swap(leakageth_, other->leakageth_);
    std::swap(tempth_, other->tempth_);
    std::swap(currentth_, other->currentth_);
    std::swap(powerth_, other->powerth_);
    std::swap(temp1outsideth_, other->temp1outsideth_);
    std::swap(temp2contactth_, other->temp2contactth_);
    std::swap(attribute_, other->attribute_);
    std::swap(cmd_, other->cmd_);
    std::swap(warning_, other->warning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MantunData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MantunData_descriptor_;
  metadata.reflection = MantunData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cayman::kIsSmokeFieldNumber;
const int Cayman::kIsMovedFieldNumber;
const int Cayman::kValueOfTemFieldNumber;
const int Cayman::kValueOfHumFieldNumber;
const int Cayman::kValueOfSmokeFieldNumber;
const int Cayman::kStandarOfSmokeFieldNumber;
const int Cayman::kAlarmOfHighTemFieldNumber;
const int Cayman::kAlarmOfLowTemFieldNumber;
const int Cayman::kAlarmOfHighHumFieldNumber;
const int Cayman::kAlarmOfLowHumFieldNumber;
const int Cayman::kCmdFieldNumber;
#endif  // !_MSC_VER

Cayman::Cayman()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cayman::InitAsDefaultInstance() {
}

Cayman::Cayman(const Cayman& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cayman::SharedCtor() {
  _cached_size_ = 0;
  issmoke_ = 0u;
  ismoved_ = 0u;
  valueoftem_ = 0;
  valueofhum_ = 0u;
  valueofsmoke_ = 0u;
  standarofsmoke_ = 0u;
  alarmofhightem_ = 0;
  alarmoflowtem_ = 0;
  alarmofhighhum_ = 0u;
  alarmoflowhum_ = 0u;
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cayman::~Cayman() {
  SharedDtor();
}

void Cayman::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cayman::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cayman::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cayman_descriptor_;
}

const Cayman& Cayman::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

Cayman* Cayman::default_instance_ = NULL;

Cayman* Cayman::New() const {
  return new Cayman;
}

void Cayman::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issmoke_ = 0u;
    ismoved_ = 0u;
    valueoftem_ = 0;
    valueofhum_ = 0u;
    valueofsmoke_ = 0u;
    standarofsmoke_ = 0u;
    alarmofhightem_ = 0;
    alarmoflowtem_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    alarmofhighhum_ = 0u;
    alarmoflowhum_ = 0u;
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cayman::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isSmoke = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &issmoke_)));
          set_has_issmoke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMoved;
        break;
      }

      // optional uint32 isMoved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMoved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismoved_)));
          set_has_ismoved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueOfTem;
        break;
      }

      // optional sint32 valueOfTem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueOfTem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &valueoftem_)));
          set_has_valueoftem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_valueOfHum;
        break;
      }

      // optional uint32 valueOfHum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueOfHum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueofhum_)));
          set_has_valueofhum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_valueOfSmoke;
        break;
      }

      // optional uint32 valueOfSmoke = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueOfSmoke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueofsmoke_)));
          set_has_valueofsmoke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_standarOfSmoke;
        break;
      }

      // optional uint32 standarOfSmoke = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standarOfSmoke:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standarofsmoke_)));
          set_has_standarofsmoke();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_alarmOfHighTem;
        break;
      }

      // optional sint32 alarmOfHighTem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmOfHighTem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmofhightem_)));
          set_has_alarmofhightem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_alarmOfLowTem;
        break;
      }

      // optional sint32 alarmOfLowTem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmOfLowTem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &alarmoflowtem_)));
          set_has_alarmoflowtem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_alarmOfHighHum;
        break;
      }

      // optional uint32 alarmOfHighHum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmOfHighHum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarmofhighhum_)));
          set_has_alarmofhighhum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_alarmOfLowHum;
        break;
      }

      // optional uint32 alarmOfLowHum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmOfLowHum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarmoflowhum_)));
          set_has_alarmoflowhum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cayman::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 isSmoke = 1;
  if (has_issmoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->issmoke(), output);
  }

  // optional uint32 isMoved = 2;
  if (has_ismoved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ismoved(), output);
  }

  // optional sint32 valueOfTem = 3;
  if (has_valueoftem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->valueoftem(), output);
  }

  // optional uint32 valueOfHum = 4;
  if (has_valueofhum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valueofhum(), output);
  }

  // optional uint32 valueOfSmoke = 5;
  if (has_valueofsmoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->valueofsmoke(), output);
  }

  // optional uint32 standarOfSmoke = 6;
  if (has_standarofsmoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->standarofsmoke(), output);
  }

  // optional sint32 alarmOfHighTem = 7;
  if (has_alarmofhightem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->alarmofhightem(), output);
  }

  // optional sint32 alarmOfLowTem = 8;
  if (has_alarmoflowtem()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->alarmoflowtem(), output);
  }

  // optional uint32 alarmOfHighHum = 9;
  if (has_alarmofhighhum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->alarmofhighhum(), output);
  }

  // optional uint32 alarmOfLowHum = 10;
  if (has_alarmoflowhum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->alarmoflowhum(), output);
  }

  // optional uint32 cmd = 11;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cayman::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 isSmoke = 1;
  if (has_issmoke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->issmoke(), target);
  }

  // optional uint32 isMoved = 2;
  if (has_ismoved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ismoved(), target);
  }

  // optional sint32 valueOfTem = 3;
  if (has_valueoftem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->valueoftem(), target);
  }

  // optional uint32 valueOfHum = 4;
  if (has_valueofhum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valueofhum(), target);
  }

  // optional uint32 valueOfSmoke = 5;
  if (has_valueofsmoke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->valueofsmoke(), target);
  }

  // optional uint32 standarOfSmoke = 6;
  if (has_standarofsmoke()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->standarofsmoke(), target);
  }

  // optional sint32 alarmOfHighTem = 7;
  if (has_alarmofhightem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->alarmofhightem(), target);
  }

  // optional sint32 alarmOfLowTem = 8;
  if (has_alarmoflowtem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->alarmoflowtem(), target);
  }

  // optional uint32 alarmOfHighHum = 9;
  if (has_alarmofhighhum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->alarmofhighhum(), target);
  }

  // optional uint32 alarmOfLowHum = 10;
  if (has_alarmoflowhum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->alarmoflowhum(), target);
  }

  // optional uint32 cmd = 11;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cayman::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isSmoke = 1;
    if (has_issmoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->issmoke());
    }

    // optional uint32 isMoved = 2;
    if (has_ismoved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismoved());
    }

    // optional sint32 valueOfTem = 3;
    if (has_valueoftem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->valueoftem());
    }

    // optional uint32 valueOfHum = 4;
    if (has_valueofhum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueofhum());
    }

    // optional uint32 valueOfSmoke = 5;
    if (has_valueofsmoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueofsmoke());
    }

    // optional uint32 standarOfSmoke = 6;
    if (has_standarofsmoke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standarofsmoke());
    }

    // optional sint32 alarmOfHighTem = 7;
    if (has_alarmofhightem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmofhightem());
    }

    // optional sint32 alarmOfLowTem = 8;
    if (has_alarmoflowtem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->alarmoflowtem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 alarmOfHighHum = 9;
    if (has_alarmofhighhum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarmofhighhum());
    }

    // optional uint32 alarmOfLowHum = 10;
    if (has_alarmoflowhum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarmoflowhum());
    }

    // optional uint32 cmd = 11;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cayman::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cayman* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cayman*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cayman::MergeFrom(const Cayman& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issmoke()) {
      set_issmoke(from.issmoke());
    }
    if (from.has_ismoved()) {
      set_ismoved(from.ismoved());
    }
    if (from.has_valueoftem()) {
      set_valueoftem(from.valueoftem());
    }
    if (from.has_valueofhum()) {
      set_valueofhum(from.valueofhum());
    }
    if (from.has_valueofsmoke()) {
      set_valueofsmoke(from.valueofsmoke());
    }
    if (from.has_standarofsmoke()) {
      set_standarofsmoke(from.standarofsmoke());
    }
    if (from.has_alarmofhightem()) {
      set_alarmofhightem(from.alarmofhightem());
    }
    if (from.has_alarmoflowtem()) {
      set_alarmoflowtem(from.alarmoflowtem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alarmofhighhum()) {
      set_alarmofhighhum(from.alarmofhighhum());
    }
    if (from.has_alarmoflowhum()) {
      set_alarmoflowhum(from.alarmoflowhum());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cayman::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cayman::CopyFrom(const Cayman& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cayman::IsInitialized() const {

  return true;
}

void Cayman::Swap(Cayman* other) {
  if (other != this) {
    std::swap(issmoke_, other->issmoke_);
    std::swap(ismoved_, other->ismoved_);
    std::swap(valueoftem_, other->valueoftem_);
    std::swap(valueofhum_, other->valueofhum_);
    std::swap(valueofsmoke_, other->valueofsmoke_);
    std::swap(standarofsmoke_, other->standarofsmoke_);
    std::swap(alarmofhightem_, other->alarmofhightem_);
    std::swap(alarmoflowtem_, other->alarmoflowtem_);
    std::swap(alarmofhighhum_, other->alarmofhighhum_);
    std::swap(alarmoflowhum_, other->alarmoflowhum_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cayman::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cayman_descriptor_;
  metadata.reflection = Cayman_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcrelData::kChannelTypeFieldNumber;
const int AcrelData::kShortCircuitFieldNumber;
const int AcrelData::kOpenCircuitFieldNumber;
const int AcrelData::kChStatusFieldNumber;
const int AcrelData::kLeakageValFieldNumber;
const int AcrelData::kT1ValFieldNumber;
const int AcrelData::kT2ValFieldNumber;
const int AcrelData::kT3ValFieldNumber;
const int AcrelData::kT4ValFieldNumber;
const int AcrelData::kConnectSwFieldNumber;
const int AcrelData::kChEnableFieldNumber;
const int AcrelData::kLeakageThFieldNumber;
const int AcrelData::kT1ThFieldNumber;
const int AcrelData::kT2ThFieldNumber;
const int AcrelData::kT3ThFieldNumber;
const int AcrelData::kT4ThFieldNumber;
const int AcrelData::kPasswdFieldNumber;
const int AcrelData::kAValFieldNumber;
const int AcrelData::kBValFieldNumber;
const int AcrelData::kCValFieldNumber;
const int AcrelData::kValStatusFieldNumber;
const int AcrelData::kACurrFieldNumber;
const int AcrelData::kBCurrFieldNumber;
const int AcrelData::kCCurrFieldNumber;
const int AcrelData::kCurrStatusFieldNumber;
const int AcrelData::kTotalYgFieldNumber;
const int AcrelData::kTotalWgFieldNumber;
const int AcrelData::kTotalSzFieldNumber;
const int AcrelData::kTotalFactorFieldNumber;
const int AcrelData::kValHighSetFieldNumber;
const int AcrelData::kValLowSetFieldNumber;
const int AcrelData::kCurrHighSetFieldNumber;
const int AcrelData::kEnergyKwhFieldNumber;
const int AcrelData::kCurrentThFieldNumber;
const int AcrelData::kCmdFieldNumber;
const int AcrelData::kDevErrorFieldNumber;
const int AcrelData::kCtFieldNumber;
const int AcrelData::kOutputSwFieldNumber;
#endif  // !_MSC_VER

AcrelData::AcrelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcrelData::InitAsDefaultInstance() {
}

AcrelData::AcrelData(const AcrelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcrelData::SharedCtor() {
  _cached_size_ = 0;
  channeltype_ = 0u;
  shortcircuit_ = 0u;
  opencircuit_ = 0u;
  chstatus_ = 0u;
  leakageval_ = 0;
  t1val_ = 0;
  t2val_ = 0;
  t3val_ = 0;
  t4val_ = 0;
  connectsw_ = 0u;
  chenable_ = 0u;
  leakageth_ = 0u;
  t1th_ = 0u;
  t2th_ = 0u;
  t3th_ = 0u;
  t4th_ = 0u;
  passwd_ = 0u;
  aval_ = 0u;
  bval_ = 0u;
  cval_ = 0u;
  valstatus_ = 0u;
  acurr_ = 0u;
  bcurr_ = 0u;
  ccurr_ = 0u;
  currstatus_ = 0u;
  totalyg_ = 0u;
  totalwg_ = 0u;
  totalsz_ = 0u;
  totalfactor_ = 0u;
  valhighset_ = 0u;
  vallowset_ = 0u;
  currhighset_ = 0u;
  energykwh_ = 0u;
  currentth_ = 0u;
  cmd_ = 0u;
  deverror_ = 0u;
  ct_ = 0u;
  outputsw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcrelData::~AcrelData() {
  SharedDtor();
}

void AcrelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcrelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcrelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcrelData_descriptor_;
}

const AcrelData& AcrelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

AcrelData* AcrelData::default_instance_ = NULL;

AcrelData* AcrelData::New() const {
  return new AcrelData;
}

void AcrelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channeltype_ = 0u;
    shortcircuit_ = 0u;
    opencircuit_ = 0u;
    chstatus_ = 0u;
    leakageval_ = 0;
    t1val_ = 0;
    t2val_ = 0;
    t3val_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t4val_ = 0;
    connectsw_ = 0u;
    chenable_ = 0u;
    leakageth_ = 0u;
    t1th_ = 0u;
    t2th_ = 0u;
    t3th_ = 0u;
    t4th_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    passwd_ = 0u;
    aval_ = 0u;
    bval_ = 0u;
    cval_ = 0u;
    valstatus_ = 0u;
    acurr_ = 0u;
    bcurr_ = 0u;
    ccurr_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    currstatus_ = 0u;
    totalyg_ = 0u;
    totalwg_ = 0u;
    totalsz_ = 0u;
    totalfactor_ = 0u;
    valhighset_ = 0u;
    vallowset_ = 0u;
    currhighset_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    energykwh_ = 0u;
    currentth_ = 0u;
    cmd_ = 0u;
    deverror_ = 0u;
    ct_ = 0u;
    outputsw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcrelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channeltype_)));
          set_has_channeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shortCircuit;
        break;
      }

      // optional uint32 shortCircuit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shortCircuit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcircuit_)));
          set_has_shortcircuit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_openCircuit;
        break;
      }

      // optional uint32 openCircuit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openCircuit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opencircuit_)));
          set_has_opencircuit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chStatus;
        break;
      }

      // optional uint32 chStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chstatus_)));
          set_has_chstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leakageVal;
        break;
      }

      // optional sint32 leakageVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakageVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &leakageval_)));
          set_has_leakageval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_t1Val;
        break;
      }

      // optional sint32 t1Val = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t1Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t1val_)));
          set_has_t1val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t2Val;
        break;
      }

      // optional sint32 t2Val = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t2Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t2val_)));
          set_has_t2val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_t3Val;
        break;
      }

      // optional sint32 t3Val = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t3Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t3val_)));
          set_has_t3val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t4Val;
        break;
      }

      // optional sint32 t4Val = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t4Val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &t4val_)));
          set_has_t4val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_connectSw;
        break;
      }

      // optional uint32 connectSw = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connectSw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connectsw_)));
          set_has_connectsw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_chEnable;
        break;
      }

      // optional uint32 chEnable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chenable_)));
          set_has_chenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_leakageTh;
        break;
      }

      // optional uint32 leakageTh = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leakageTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leakageth_)));
          set_has_leakageth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_t1Th;
        break;
      }

      // optional uint32 t1Th = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t1Th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t1th_)));
          set_has_t1th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_t2Th;
        break;
      }

      // optional uint32 t2Th = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t2Th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t2th_)));
          set_has_t2th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_t3Th;
        break;
      }

      // optional uint32 t3Th = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t3Th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t3th_)));
          set_has_t3th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_t4Th;
        break;
      }

      // optional uint32 t4Th = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t4Th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t4th_)));
          set_has_t4th();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_passwd;
        break;
      }

      // optional uint32 passwd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passwd_)));
          set_has_passwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_aVal;
        break;
      }

      // optional uint32 aVal = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aval_)));
          set_has_aval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bVal;
        break;
      }

      // optional uint32 bVal = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bval_)));
          set_has_bval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cVal;
        break;
      }

      // optional uint32 cVal = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cval_)));
          set_has_cval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_valStatus;
        break;
      }

      // optional uint32 valStatus = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valstatus_)));
          set_has_valstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_aCurr;
        break;
      }

      // optional uint32 aCurr = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aCurr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acurr_)));
          set_has_acurr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_bCurr;
        break;
      }

      // optional uint32 bCurr = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bCurr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcurr_)));
          set_has_bcurr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_cCurr;
        break;
      }

      // optional uint32 cCurr = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cCurr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccurr_)));
          set_has_ccurr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_currStatus;
        break;
      }

      // optional uint32 currStatus = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currstatus_)));
          set_has_currstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_totalYg;
        break;
      }

      // optional uint32 totalYg = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalYg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalyg_)));
          set_has_totalyg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_totalWg;
        break;
      }

      // optional uint32 totalWg = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalWg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalwg_)));
          set_has_totalwg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_totalSz;
        break;
      }

      // optional uint32 totalSz = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalSz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalsz_)));
          set_has_totalsz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_totalFactor;
        break;
      }

      // optional uint32 totalFactor = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalfactor_)));
          set_has_totalfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_valHighSet;
        break;
      }

      // optional uint32 valHighSet = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valHighSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valhighset_)));
          set_has_valhighset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_valLowSet;
        break;
      }

      // optional uint32 valLowSet = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valLowSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vallowset_)));
          set_has_vallowset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_currHighSet;
        break;
      }

      // optional uint32 currHighSet = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currHighSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currhighset_)));
          set_has_currhighset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_energyKwh;
        break;
      }

      // optional uint32 energyKwh = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyKwh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energykwh_)));
          set_has_energykwh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_currentTh;
        break;
      }

      // optional uint32 currentTh = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentth_)));
          set_has_currentth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_devError;
        break;
      }

      // optional uint32 devError = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deverror_)));
          set_has_deverror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_ct;
        break;
      }

      // optional uint32 ct = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ct_)));
          set_has_ct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_outputSw;
        break;
      }

      // optional uint32 outputSw = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outputSw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &outputsw_)));
          set_has_outputsw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcrelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channelType = 1;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channeltype(), output);
  }

  // optional uint32 shortCircuit = 2;
  if (has_shortcircuit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shortcircuit(), output);
  }

  // optional uint32 openCircuit = 3;
  if (has_opencircuit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opencircuit(), output);
  }

  // optional uint32 chStatus = 4;
  if (has_chstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chstatus(), output);
  }

  // optional sint32 leakageVal = 5;
  if (has_leakageval()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->leakageval(), output);
  }

  // optional sint32 t1Val = 6;
  if (has_t1val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->t1val(), output);
  }

  // optional sint32 t2Val = 7;
  if (has_t2val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->t2val(), output);
  }

  // optional sint32 t3Val = 8;
  if (has_t3val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->t3val(), output);
  }

  // optional sint32 t4Val = 9;
  if (has_t4val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->t4val(), output);
  }

  // optional uint32 connectSw = 10;
  if (has_connectsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->connectsw(), output);
  }

  // optional uint32 chEnable = 11;
  if (has_chenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->chenable(), output);
  }

  // optional uint32 leakageTh = 12;
  if (has_leakageth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->leakageth(), output);
  }

  // optional uint32 t1Th = 13;
  if (has_t1th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->t1th(), output);
  }

  // optional uint32 t2Th = 14;
  if (has_t2th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->t2th(), output);
  }

  // optional uint32 t3Th = 15;
  if (has_t3th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->t3th(), output);
  }

  // optional uint32 t4Th = 16;
  if (has_t4th()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->t4th(), output);
  }

  // optional uint32 passwd = 17;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->passwd(), output);
  }

  // optional uint32 aVal = 18;
  if (has_aval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->aval(), output);
  }

  // optional uint32 bVal = 19;
  if (has_bval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->bval(), output);
  }

  // optional uint32 cVal = 20;
  if (has_cval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cval(), output);
  }

  // optional uint32 valStatus = 21;
  if (has_valstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->valstatus(), output);
  }

  // optional uint32 aCurr = 22;
  if (has_acurr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->acurr(), output);
  }

  // optional uint32 bCurr = 23;
  if (has_bcurr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->bcurr(), output);
  }

  // optional uint32 cCurr = 24;
  if (has_ccurr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->ccurr(), output);
  }

  // optional uint32 currStatus = 25;
  if (has_currstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->currstatus(), output);
  }

  // optional uint32 totalYg = 26;
  if (has_totalyg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->totalyg(), output);
  }

  // optional uint32 totalWg = 27;
  if (has_totalwg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->totalwg(), output);
  }

  // optional uint32 totalSz = 28;
  if (has_totalsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->totalsz(), output);
  }

  // optional uint32 totalFactor = 29;
  if (has_totalfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->totalfactor(), output);
  }

  // optional uint32 valHighSet = 30;
  if (has_valhighset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->valhighset(), output);
  }

  // optional uint32 valLowSet = 31;
  if (has_vallowset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->vallowset(), output);
  }

  // optional uint32 currHighSet = 32;
  if (has_currhighset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->currhighset(), output);
  }

  // optional uint32 energyKwh = 33;
  if (has_energykwh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->energykwh(), output);
  }

  // optional uint32 currentTh = 34;
  if (has_currentth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->currentth(), output);
  }

  // optional uint32 cmd = 35;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->cmd(), output);
  }

  // optional uint32 devError = 36;
  if (has_deverror()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->deverror(), output);
  }

  // optional uint32 ct = 37;
  if (has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->ct(), output);
  }

  // optional uint32 outputSw = 38;
  if (has_outputsw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->outputsw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcrelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channelType = 1;
  if (has_channeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channeltype(), target);
  }

  // optional uint32 shortCircuit = 2;
  if (has_shortcircuit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shortcircuit(), target);
  }

  // optional uint32 openCircuit = 3;
  if (has_opencircuit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opencircuit(), target);
  }

  // optional uint32 chStatus = 4;
  if (has_chstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chstatus(), target);
  }

  // optional sint32 leakageVal = 5;
  if (has_leakageval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->leakageval(), target);
  }

  // optional sint32 t1Val = 6;
  if (has_t1val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->t1val(), target);
  }

  // optional sint32 t2Val = 7;
  if (has_t2val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->t2val(), target);
  }

  // optional sint32 t3Val = 8;
  if (has_t3val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->t3val(), target);
  }

  // optional sint32 t4Val = 9;
  if (has_t4val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->t4val(), target);
  }

  // optional uint32 connectSw = 10;
  if (has_connectsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->connectsw(), target);
  }

  // optional uint32 chEnable = 11;
  if (has_chenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->chenable(), target);
  }

  // optional uint32 leakageTh = 12;
  if (has_leakageth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->leakageth(), target);
  }

  // optional uint32 t1Th = 13;
  if (has_t1th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->t1th(), target);
  }

  // optional uint32 t2Th = 14;
  if (has_t2th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->t2th(), target);
  }

  // optional uint32 t3Th = 15;
  if (has_t3th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->t3th(), target);
  }

  // optional uint32 t4Th = 16;
  if (has_t4th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->t4th(), target);
  }

  // optional uint32 passwd = 17;
  if (has_passwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->passwd(), target);
  }

  // optional uint32 aVal = 18;
  if (has_aval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->aval(), target);
  }

  // optional uint32 bVal = 19;
  if (has_bval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->bval(), target);
  }

  // optional uint32 cVal = 20;
  if (has_cval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cval(), target);
  }

  // optional uint32 valStatus = 21;
  if (has_valstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->valstatus(), target);
  }

  // optional uint32 aCurr = 22;
  if (has_acurr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->acurr(), target);
  }

  // optional uint32 bCurr = 23;
  if (has_bcurr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->bcurr(), target);
  }

  // optional uint32 cCurr = 24;
  if (has_ccurr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->ccurr(), target);
  }

  // optional uint32 currStatus = 25;
  if (has_currstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->currstatus(), target);
  }

  // optional uint32 totalYg = 26;
  if (has_totalyg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->totalyg(), target);
  }

  // optional uint32 totalWg = 27;
  if (has_totalwg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->totalwg(), target);
  }

  // optional uint32 totalSz = 28;
  if (has_totalsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->totalsz(), target);
  }

  // optional uint32 totalFactor = 29;
  if (has_totalfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->totalfactor(), target);
  }

  // optional uint32 valHighSet = 30;
  if (has_valhighset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->valhighset(), target);
  }

  // optional uint32 valLowSet = 31;
  if (has_vallowset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->vallowset(), target);
  }

  // optional uint32 currHighSet = 32;
  if (has_currhighset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->currhighset(), target);
  }

  // optional uint32 energyKwh = 33;
  if (has_energykwh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->energykwh(), target);
  }

  // optional uint32 currentTh = 34;
  if (has_currentth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->currentth(), target);
  }

  // optional uint32 cmd = 35;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->cmd(), target);
  }

  // optional uint32 devError = 36;
  if (has_deverror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->deverror(), target);
  }

  // optional uint32 ct = 37;
  if (has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->ct(), target);
  }

  // optional uint32 outputSw = 38;
  if (has_outputsw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->outputsw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcrelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelType = 1;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channeltype());
    }

    // optional uint32 shortCircuit = 2;
    if (has_shortcircuit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcircuit());
    }

    // optional uint32 openCircuit = 3;
    if (has_opencircuit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opencircuit());
    }

    // optional uint32 chStatus = 4;
    if (has_chstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chstatus());
    }

    // optional sint32 leakageVal = 5;
    if (has_leakageval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->leakageval());
    }

    // optional sint32 t1Val = 6;
    if (has_t1val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t1val());
    }

    // optional sint32 t2Val = 7;
    if (has_t2val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t2val());
    }

    // optional sint32 t3Val = 8;
    if (has_t3val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t3val());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 t4Val = 9;
    if (has_t4val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->t4val());
    }

    // optional uint32 connectSw = 10;
    if (has_connectsw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connectsw());
    }

    // optional uint32 chEnable = 11;
    if (has_chenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chenable());
    }

    // optional uint32 leakageTh = 12;
    if (has_leakageth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leakageth());
    }

    // optional uint32 t1Th = 13;
    if (has_t1th()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t1th());
    }

    // optional uint32 t2Th = 14;
    if (has_t2th()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t2th());
    }

    // optional uint32 t3Th = 15;
    if (has_t3th()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t3th());
    }

    // optional uint32 t4Th = 16;
    if (has_t4th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t4th());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 passwd = 17;
    if (has_passwd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passwd());
    }

    // optional uint32 aVal = 18;
    if (has_aval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aval());
    }

    // optional uint32 bVal = 19;
    if (has_bval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bval());
    }

    // optional uint32 cVal = 20;
    if (has_cval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cval());
    }

    // optional uint32 valStatus = 21;
    if (has_valstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valstatus());
    }

    // optional uint32 aCurr = 22;
    if (has_acurr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acurr());
    }

    // optional uint32 bCurr = 23;
    if (has_bcurr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcurr());
    }

    // optional uint32 cCurr = 24;
    if (has_ccurr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccurr());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 currStatus = 25;
    if (has_currstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currstatus());
    }

    // optional uint32 totalYg = 26;
    if (has_totalyg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalyg());
    }

    // optional uint32 totalWg = 27;
    if (has_totalwg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalwg());
    }

    // optional uint32 totalSz = 28;
    if (has_totalsz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalsz());
    }

    // optional uint32 totalFactor = 29;
    if (has_totalfactor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalfactor());
    }

    // optional uint32 valHighSet = 30;
    if (has_valhighset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valhighset());
    }

    // optional uint32 valLowSet = 31;
    if (has_vallowset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vallowset());
    }

    // optional uint32 currHighSet = 32;
    if (has_currhighset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currhighset());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 energyKwh = 33;
    if (has_energykwh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energykwh());
    }

    // optional uint32 currentTh = 34;
    if (has_currentth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentth());
    }

    // optional uint32 cmd = 35;
    if (has_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 devError = 36;
    if (has_deverror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deverror());
    }

    // optional uint32 ct = 37;
    if (has_ct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ct());
    }

    // optional uint32 outputSw = 38;
    if (has_outputsw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->outputsw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcrelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcrelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcrelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcrelData::MergeFrom(const AcrelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_shortcircuit()) {
      set_shortcircuit(from.shortcircuit());
    }
    if (from.has_opencircuit()) {
      set_opencircuit(from.opencircuit());
    }
    if (from.has_chstatus()) {
      set_chstatus(from.chstatus());
    }
    if (from.has_leakageval()) {
      set_leakageval(from.leakageval());
    }
    if (from.has_t1val()) {
      set_t1val(from.t1val());
    }
    if (from.has_t2val()) {
      set_t2val(from.t2val());
    }
    if (from.has_t3val()) {
      set_t3val(from.t3val());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_t4val()) {
      set_t4val(from.t4val());
    }
    if (from.has_connectsw()) {
      set_connectsw(from.connectsw());
    }
    if (from.has_chenable()) {
      set_chenable(from.chenable());
    }
    if (from.has_leakageth()) {
      set_leakageth(from.leakageth());
    }
    if (from.has_t1th()) {
      set_t1th(from.t1th());
    }
    if (from.has_t2th()) {
      set_t2th(from.t2th());
    }
    if (from.has_t3th()) {
      set_t3th(from.t3th());
    }
    if (from.has_t4th()) {
      set_t4th(from.t4th());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_aval()) {
      set_aval(from.aval());
    }
    if (from.has_bval()) {
      set_bval(from.bval());
    }
    if (from.has_cval()) {
      set_cval(from.cval());
    }
    if (from.has_valstatus()) {
      set_valstatus(from.valstatus());
    }
    if (from.has_acurr()) {
      set_acurr(from.acurr());
    }
    if (from.has_bcurr()) {
      set_bcurr(from.bcurr());
    }
    if (from.has_ccurr()) {
      set_ccurr(from.ccurr());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_currstatus()) {
      set_currstatus(from.currstatus());
    }
    if (from.has_totalyg()) {
      set_totalyg(from.totalyg());
    }
    if (from.has_totalwg()) {
      set_totalwg(from.totalwg());
    }
    if (from.has_totalsz()) {
      set_totalsz(from.totalsz());
    }
    if (from.has_totalfactor()) {
      set_totalfactor(from.totalfactor());
    }
    if (from.has_valhighset()) {
      set_valhighset(from.valhighset());
    }
    if (from.has_vallowset()) {
      set_vallowset(from.vallowset());
    }
    if (from.has_currhighset()) {
      set_currhighset(from.currhighset());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_energykwh()) {
      set_energykwh(from.energykwh());
    }
    if (from.has_currentth()) {
      set_currentth(from.currentth());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_deverror()) {
      set_deverror(from.deverror());
    }
    if (from.has_ct()) {
      set_ct(from.ct());
    }
    if (from.has_outputsw()) {
      set_outputsw(from.outputsw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcrelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcrelData::CopyFrom(const AcrelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcrelData::IsInitialized() const {

  return true;
}

void AcrelData::Swap(AcrelData* other) {
  if (other != this) {
    std::swap(channeltype_, other->channeltype_);
    std::swap(shortcircuit_, other->shortcircuit_);
    std::swap(opencircuit_, other->opencircuit_);
    std::swap(chstatus_, other->chstatus_);
    std::swap(leakageval_, other->leakageval_);
    std::swap(t1val_, other->t1val_);
    std::swap(t2val_, other->t2val_);
    std::swap(t3val_, other->t3val_);
    std::swap(t4val_, other->t4val_);
    std::swap(connectsw_, other->connectsw_);
    std::swap(chenable_, other->chenable_);
    std::swap(leakageth_, other->leakageth_);
    std::swap(t1th_, other->t1th_);
    std::swap(t2th_, other->t2th_);
    std::swap(t3th_, other->t3th_);
    std::swap(t4th_, other->t4th_);
    std::swap(passwd_, other->passwd_);
    std::swap(aval_, other->aval_);
    std::swap(bval_, other->bval_);
    std::swap(cval_, other->cval_);
    std::swap(valstatus_, other->valstatus_);
    std::swap(acurr_, other->acurr_);
    std::swap(bcurr_, other->bcurr_);
    std::swap(ccurr_, other->ccurr_);
    std::swap(currstatus_, other->currstatus_);
    std::swap(totalyg_, other->totalyg_);
    std::swap(totalwg_, other->totalwg_);
    std::swap(totalsz_, other->totalsz_);
    std::swap(totalfactor_, other->totalfactor_);
    std::swap(valhighset_, other->valhighset_);
    std::swap(vallowset_, other->vallowset_);
    std::swap(currhighset_, other->currhighset_);
    std::swap(energykwh_, other->energykwh_);
    std::swap(currentth_, other->currentth_);
    std::swap(cmd_, other->cmd_);
    std::swap(deverror_, other->deverror_);
    std::swap(ct_, other->ct_);
    std::swap(outputsw_, other->outputsw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcrelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcrelData_descriptor_;
  metadata.reflection = AcrelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgNode::kIdFieldNumber;
const int MsgNode::kCmdFieldNumber;
const int MsgNode::kCmdRetFieldNumber;
const int MsgNode::kLpwanParamFieldNumber;
const int MsgNode::kBleParamFieldNumber;
const int MsgNode::kAppParamFieldNumber;
const int MsgNode::kBatteryFieldNumber;
const int MsgNode::kGpsFieldNumber;
const int MsgNode::kAccelerationFieldNumber;
const int MsgNode::kMagnetismFieldNumber;
const int MsgNode::kGyroscopeFieldNumber;
const int MsgNode::kTemperatureFieldNumber;
const int MsgNode::kHumidityFieldNumber;
const int MsgNode::kLightFieldNumber;
const int MsgNode::kLeakFieldNumber;
const int MsgNode::kCoFieldNumber;
const int MsgNode::kCo2FieldNumber;
const int MsgNode::kSo2FieldNumber;
const int MsgNode::kNo2FieldNumber;
const int MsgNode::kCh4FieldNumber;
const int MsgNode::kCh2OFieldNumber;
const int MsgNode::kLpgFieldNumber;
const int MsgNode::kO3FieldNumber;
const int MsgNode::kPm1FieldNumber;
const int MsgNode::kPm25FieldNumber;
const int MsgNode::kPm10FieldNumber;
const int MsgNode::kAngleFieldNumber;
const int MsgNode::kCoverFieldNumber;
const int MsgNode::kLevelFieldNumber;
const int MsgNode::kSmokeFieldNumber;
const int MsgNode::kPitchFieldNumber;
const int MsgNode::kRollFieldNumber;
const int MsgNode::kYawFieldNumber;
const int MsgNode::kFlameFieldNumber;
const int MsgNode::kArtificialGasFieldNumber;
const int MsgNode::kMultiTempFieldNumber;
const int MsgNode::kWaterPressureFieldNumber;
const int MsgNode::kIbeaconFieldNumber;
const int MsgNode::kSensorsFieldNumber;
const int MsgNode::kInstalledFieldNumber;
const int MsgNode::kExtSmokeFieldNumber;
const int MsgNode::kFireDataFieldNumber;
const int MsgNode::kMtunDataFieldNumber;
const int MsgNode::kAcrelDataFieldNumber;
const int MsgNode::kCaymanDataFieldNumber;
#endif  // !_MSC_VER

MsgNode::MsgNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgNode::InitAsDefaultInstance() {
  lpwanparam_ = const_cast< ::LpwanParam*>(&::LpwanParam::default_instance());
  bleparam_ = const_cast< ::BleParam*>(&::BleParam::default_instance());
  appparam_ = const_cast< ::AppParam*>(&::AppParam::default_instance());
  gps_ = const_cast< ::GpsData*>(&::GpsData::default_instance());
  acceleration_ = const_cast< ::AxisData*>(&::AxisData::default_instance());
  magnetism_ = const_cast< ::AxisData*>(&::AxisData::default_instance());
  gyroscope_ = const_cast< ::AxisData*>(&::AxisData::default_instance());
  temperature_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  humidity_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  light_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  leak_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  co_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  co2_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  so2_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  no2_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  ch4_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  ch2o_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  lpg_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  o3_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  pm1_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  pm2_5_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  pm10_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  angle_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  cover_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  level_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  smoke_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  pitch_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  roll_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  yaw_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  flame_ = const_cast< ::SensorDataInt*>(&::SensorDataInt::default_instance());
  artificialgas_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  multitemp_ = const_cast< ::MultiSensorDataInt*>(&::MultiSensorDataInt::default_instance());
  waterpressure_ = const_cast< ::SensorData*>(&::SensorData::default_instance());
  ibeacon_ = const_cast< ::iBeacon*>(&::iBeacon::default_instance());
  extsmoke_ = const_cast< ::ExtSmoke*>(&::ExtSmoke::default_instance());
  firedata_ = const_cast< ::ElecFireData*>(&::ElecFireData::default_instance());
  mtundata_ = const_cast< ::MantunData*>(&::MantunData::default_instance());
  acreldata_ = const_cast< ::AcrelData*>(&::AcrelData::default_instance());
  caymandata_ = const_cast< ::Cayman*>(&::Cayman::default_instance());
}

MsgNode::MsgNode(const MsgNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cmd_ = 0u;
  cmdret_ = 0u;
  lpwanparam_ = NULL;
  bleparam_ = NULL;
  appparam_ = NULL;
  battery_ = 0;
  gps_ = NULL;
  acceleration_ = NULL;
  magnetism_ = NULL;
  gyroscope_ = NULL;
  temperature_ = NULL;
  humidity_ = NULL;
  light_ = NULL;
  leak_ = NULL;
  co_ = NULL;
  co2_ = NULL;
  so2_ = NULL;
  no2_ = NULL;
  ch4_ = NULL;
  ch2o_ = NULL;
  lpg_ = NULL;
  o3_ = NULL;
  pm1_ = NULL;
  pm2_5_ = NULL;
  pm10_ = NULL;
  angle_ = NULL;
  cover_ = NULL;
  level_ = NULL;
  smoke_ = NULL;
  pitch_ = NULL;
  roll_ = NULL;
  yaw_ = NULL;
  flame_ = NULL;
  artificialgas_ = NULL;
  multitemp_ = NULL;
  waterpressure_ = NULL;
  ibeacon_ = NULL;
  installed_ = false;
  extsmoke_ = NULL;
  firedata_ = NULL;
  mtundata_ = NULL;
  acreldata_ = NULL;
  caymandata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNode::~MsgNode() {
  SharedDtor();
}

void MsgNode::SharedDtor() {
  if (this != default_instance_) {
    delete lpwanparam_;
    delete bleparam_;
    delete appparam_;
    delete gps_;
    delete acceleration_;
    delete magnetism_;
    delete gyroscope_;
    delete temperature_;
    delete humidity_;
    delete light_;
    delete leak_;
    delete co_;
    delete co2_;
    delete so2_;
    delete no2_;
    delete ch4_;
    delete ch2o_;
    delete lpg_;
    delete o3_;
    delete pm1_;
    delete pm2_5_;
    delete pm10_;
    delete angle_;
    delete cover_;
    delete level_;
    delete smoke_;
    delete pitch_;
    delete roll_;
    delete yaw_;
    delete flame_;
    delete artificialgas_;
    delete multitemp_;
    delete waterpressure_;
    delete ibeacon_;
    delete extsmoke_;
    delete firedata_;
    delete mtundata_;
    delete acreldata_;
    delete caymandata_;
  }
}

void MsgNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNode_descriptor_;
}

const MsgNode& MsgNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MsgNode_5f1v1_5fm13_2eproto();
  return *default_instance_;
}

MsgNode* MsgNode::default_instance_ = NULL;

MsgNode* MsgNode::New() const {
  return new MsgNode;
}

void MsgNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cmd_ = 0u;
    cmdret_ = 0u;
    if (has_lpwanparam()) {
      if (lpwanparam_ != NULL) lpwanparam_->::LpwanParam::Clear();
    }
    if (has_bleparam()) {
      if (bleparam_ != NULL) bleparam_->::BleParam::Clear();
    }
    if (has_appparam()) {
      if (appparam_ != NULL) appparam_->::AppParam::Clear();
    }
    battery_ = 0;
    if (has_gps()) {
      if (gps_ != NULL) gps_->::GpsData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::AxisData::Clear();
    }
    if (has_magnetism()) {
      if (magnetism_ != NULL) magnetism_->::AxisData::Clear();
    }
    if (has_gyroscope()) {
      if (gyroscope_ != NULL) gyroscope_->::AxisData::Clear();
    }
    if (has_temperature()) {
      if (temperature_ != NULL) temperature_->::SensorData::Clear();
    }
    if (has_humidity()) {
      if (humidity_ != NULL) humidity_->::SensorData::Clear();
    }
    if (has_light()) {
      if (light_ != NULL) light_->::SensorData::Clear();
    }
    if (has_leak()) {
      if (leak_ != NULL) leak_->::SensorData::Clear();
    }
    if (has_co()) {
      if (co_ != NULL) co_->::SensorData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_co2()) {
      if (co2_ != NULL) co2_->::SensorData::Clear();
    }
    if (has_so2()) {
      if (so2_ != NULL) so2_->::SensorData::Clear();
    }
    if (has_no2()) {
      if (no2_ != NULL) no2_->::SensorData::Clear();
    }
    if (has_ch4()) {
      if (ch4_ != NULL) ch4_->::SensorData::Clear();
    }
    if (has_ch2o()) {
      if (ch2o_ != NULL) ch2o_->::SensorData::Clear();
    }
    if (has_lpg()) {
      if (lpg_ != NULL) lpg_->::SensorData::Clear();
    }
    if (has_o3()) {
      if (o3_ != NULL) o3_->::SensorData::Clear();
    }
    if (has_pm1()) {
      if (pm1_ != NULL) pm1_->::SensorData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_pm2_5()) {
      if (pm2_5_ != NULL) pm2_5_->::SensorData::Clear();
    }
    if (has_pm10()) {
      if (pm10_ != NULL) pm10_->::SensorData::Clear();
    }
    if (has_angle()) {
      if (angle_ != NULL) angle_->::SensorData::Clear();
    }
    if (has_cover()) {
      if (cover_ != NULL) cover_->::SensorData::Clear();
    }
    if (has_level()) {
      if (level_ != NULL) level_->::SensorData::Clear();
    }
    if (has_smoke()) {
      if (smoke_ != NULL) smoke_->::SensorData::Clear();
    }
    if (has_pitch()) {
      if (pitch_ != NULL) pitch_->::SensorData::Clear();
    }
    if (has_roll()) {
      if (roll_ != NULL) roll_->::SensorData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_yaw()) {
      if (yaw_ != NULL) yaw_->::SensorData::Clear();
    }
    if (has_flame()) {
      if (flame_ != NULL) flame_->::SensorDataInt::Clear();
    }
    if (has_artificialgas()) {
      if (artificialgas_ != NULL) artificialgas_->::SensorData::Clear();
    }
    if (has_multitemp()) {
      if (multitemp_ != NULL) multitemp_->::MultiSensorDataInt::Clear();
    }
    if (has_waterpressure()) {
      if (waterpressure_ != NULL) waterpressure_->::SensorData::Clear();
    }
    if (has_ibeacon()) {
      if (ibeacon_ != NULL) ibeacon_->::iBeacon::Clear();
    }
    installed_ = false;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_extsmoke()) {
      if (extsmoke_ != NULL) extsmoke_->::ExtSmoke::Clear();
    }
    if (has_firedata()) {
      if (firedata_ != NULL) firedata_->::ElecFireData::Clear();
    }
    if (has_mtundata()) {
      if (mtundata_ != NULL) mtundata_->::MantunData::Clear();
    }
    if (has_acreldata()) {
      if (acreldata_ != NULL) acreldata_->::AcrelData::Clear();
    }
    if (has_caymandata()) {
      if (caymandata_ != NULL) caymandata_->::Cayman::Clear();
    }
  }
  sensors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmdRet;
        break;
      }

      // optional uint32 cmdRet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdret_)));
          set_has_cmdret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lpwanParam;
        break;
      }

      // optional .LpwanParam lpwanParam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lpwanParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lpwanparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bleParam;
        break;
      }

      // optional .BleParam bleParam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bleParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bleparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_appParam;
        break;
      }

      // optional .AppParam appParam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battery;
        break;
      }

      // optional sint32 battery = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &battery_)));
          set_has_battery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_gps;
        break;
      }

      // optional .GpsData gps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_acceleration;
        break;
      }

      // optional .AxisData acceleration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_magnetism;
        break;
      }

      // optional .AxisData magnetism = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magnetism:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magnetism()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gyroscope;
        break;
      }

      // optional .AxisData gyroscope = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyroscope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyroscope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_temperature;
        break;
      }

      // optional .SensorData temperature = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temperature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temperature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_humidity;
        break;
      }

      // optional .SensorData humidity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_humidity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_humidity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_light;
        break;
      }

      // optional .SensorData light = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_light:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_leak;
        break;
      }

      // optional .SensorData leak = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leak()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_co;
        break;
      }

      // optional .SensorData co = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_co:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_co()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_co2;
        break;
      }

      // optional .SensorData co2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_co2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_co2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_so2;
        break;
      }

      // optional .SensorData so2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_so2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_so2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_no2;
        break;
      }

      // optional .SensorData no2 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_no2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ch4;
        break;
      }

      // optional .SensorData ch4 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ch4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ch4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ch2o;
        break;
      }

      // optional .SensorData ch2o = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ch2o:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ch2o()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_lpg;
        break;
      }

      // optional .SensorData lpg = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lpg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lpg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_o3;
        break;
      }

      // optional .SensorData o3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_o3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_o3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pm1;
        break;
      }

      // optional .SensorData pm1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pm1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pm1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_pm2_5;
        break;
      }

      // optional .SensorData pm2_5 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pm2_5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pm2_5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_pm10;
        break;
      }

      // optional .SensorData pm10 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pm10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pm10()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_angle;
        break;
      }

      // optional .SensorData angle = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_cover;
        break;
      }

      // optional .SensorData cover = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cover()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_level;
        break;
      }

      // optional .SensorData level = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_smoke;
        break;
      }

      // optional .SensorData smoke = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smoke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smoke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_pitch;
        break;
      }

      // optional .SensorData pitch = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pitch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pitch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_roll;
        break;
      }

      // optional .SensorData roll = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roll()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_yaw;
        break;
      }

      // optional .SensorData yaw = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_flame;
        break;
      }

      // optional .SensorDataInt flame = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_artificialGas;
        break;
      }

      // optional .SensorData artificialGas = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artificialGas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artificialgas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_multiTemp;
        break;
      }

      // optional .MultiSensorDataInt multiTemp = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiTemp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multitemp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_waterPressure;
        break;
      }

      // optional .SensorData waterPressure = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_waterPressure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waterpressure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_ibeacon;
        break;
      }

      // optional .iBeacon ibeacon = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ibeacon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ibeacon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_sensors;
        break;
      }

      // repeated .SensorData sensors = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_sensors;
        if (input->ExpectTag(320)) goto parse_installed;
        break;
      }

      // optional bool installed = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_installed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installed_)));
          set_has_installed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_extSmoke;
        break;
      }

      // optional .ExtSmoke extSmoke = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extSmoke:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extsmoke()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_fireData;
        break;
      }

      // optional .ElecFireData fireData = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fireData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_mtunData;
        break;
      }

      // optional .MantunData mtunData = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mtunData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mtundata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_acrelData;
        break;
      }

      // optional .AcrelData acrelData = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acrelData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acreldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_caymanData;
        break;
      }

      // optional .Cayman caymanData = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caymanData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caymandata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  // optional uint32 cmdRet = 3;
  if (has_cmdret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmdret(), output);
  }

  // optional .LpwanParam lpwanParam = 4;
  if (has_lpwanparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lpwanparam(), output);
  }

  // optional .BleParam bleParam = 5;
  if (has_bleparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bleparam(), output);
  }

  // optional .AppParam appParam = 6;
  if (has_appparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->appparam(), output);
  }

  // optional sint32 battery = 7;
  if (has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->battery(), output);
  }

  // optional .GpsData gps = 8;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gps(), output);
  }

  // optional .AxisData acceleration = 9;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->acceleration(), output);
  }

  // optional .AxisData magnetism = 10;
  if (has_magnetism()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->magnetism(), output);
  }

  // optional .AxisData gyroscope = 11;
  if (has_gyroscope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gyroscope(), output);
  }

  // optional .SensorData temperature = 12;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->temperature(), output);
  }

  // optional .SensorData humidity = 13;
  if (has_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->humidity(), output);
  }

  // optional .SensorData light = 14;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->light(), output);
  }

  // optional .SensorData leak = 15;
  if (has_leak()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->leak(), output);
  }

  // optional .SensorData co = 16;
  if (has_co()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->co(), output);
  }

  // optional .SensorData co2 = 17;
  if (has_co2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->co2(), output);
  }

  // optional .SensorData so2 = 18;
  if (has_so2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->so2(), output);
  }

  // optional .SensorData no2 = 19;
  if (has_no2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->no2(), output);
  }

  // optional .SensorData ch4 = 20;
  if (has_ch4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ch4(), output);
  }

  // optional .SensorData ch2o = 21;
  if (has_ch2o()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->ch2o(), output);
  }

  // optional .SensorData lpg = 22;
  if (has_lpg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->lpg(), output);
  }

  // optional .SensorData o3 = 23;
  if (has_o3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->o3(), output);
  }

  // optional .SensorData pm1 = 24;
  if (has_pm1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->pm1(), output);
  }

  // optional .SensorData pm2_5 = 25;
  if (has_pm2_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->pm2_5(), output);
  }

  // optional .SensorData pm10 = 26;
  if (has_pm10()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->pm10(), output);
  }

  // optional .SensorData angle = 27;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->angle(), output);
  }

  // optional .SensorData cover = 28;
  if (has_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->cover(), output);
  }

  // optional .SensorData level = 29;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->level(), output);
  }

  // optional .SensorData smoke = 30;
  if (has_smoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->smoke(), output);
  }

  // optional .SensorData pitch = 31;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->pitch(), output);
  }

  // optional .SensorData roll = 32;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->roll(), output);
  }

  // optional .SensorData yaw = 33;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->yaw(), output);
  }

  // optional .SensorDataInt flame = 34;
  if (has_flame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->flame(), output);
  }

  // optional .SensorData artificialGas = 35;
  if (has_artificialgas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->artificialgas(), output);
  }

  // optional .MultiSensorDataInt multiTemp = 36;
  if (has_multitemp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->multitemp(), output);
  }

  // optional .SensorData waterPressure = 37;
  if (has_waterpressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->waterpressure(), output);
  }

  // optional .iBeacon ibeacon = 38;
  if (has_ibeacon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->ibeacon(), output);
  }

  // repeated .SensorData sensors = 39;
  for (int i = 0; i < this->sensors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->sensors(i), output);
  }

  // optional bool installed = 40;
  if (has_installed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->installed(), output);
  }

  // optional .ExtSmoke extSmoke = 41;
  if (has_extsmoke()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->extsmoke(), output);
  }

  // optional .ElecFireData fireData = 42;
  if (has_firedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->firedata(), output);
  }

  // optional .MantunData mtunData = 43;
  if (has_mtundata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->mtundata(), output);
  }

  // optional .AcrelData acrelData = 44;
  if (has_acreldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->acreldata(), output);
  }

  // optional .Cayman caymanData = 45;
  if (has_caymandata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->caymandata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  // optional uint32 cmdRet = 3;
  if (has_cmdret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmdret(), target);
  }

  // optional .LpwanParam lpwanParam = 4;
  if (has_lpwanparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lpwanparam(), target);
  }

  // optional .BleParam bleParam = 5;
  if (has_bleparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bleparam(), target);
  }

  // optional .AppParam appParam = 6;
  if (has_appparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->appparam(), target);
  }

  // optional sint32 battery = 7;
  if (has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->battery(), target);
  }

  // optional .GpsData gps = 8;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gps(), target);
  }

  // optional .AxisData acceleration = 9;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->acceleration(), target);
  }

  // optional .AxisData magnetism = 10;
  if (has_magnetism()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->magnetism(), target);
  }

  // optional .AxisData gyroscope = 11;
  if (has_gyroscope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gyroscope(), target);
  }

  // optional .SensorData temperature = 12;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->temperature(), target);
  }

  // optional .SensorData humidity = 13;
  if (has_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->humidity(), target);
  }

  // optional .SensorData light = 14;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->light(), target);
  }

  // optional .SensorData leak = 15;
  if (has_leak()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->leak(), target);
  }

  // optional .SensorData co = 16;
  if (has_co()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->co(), target);
  }

  // optional .SensorData co2 = 17;
  if (has_co2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->co2(), target);
  }

  // optional .SensorData so2 = 18;
  if (has_so2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->so2(), target);
  }

  // optional .SensorData no2 = 19;
  if (has_no2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->no2(), target);
  }

  // optional .SensorData ch4 = 20;
  if (has_ch4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ch4(), target);
  }

  // optional .SensorData ch2o = 21;
  if (has_ch2o()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->ch2o(), target);
  }

  // optional .SensorData lpg = 22;
  if (has_lpg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->lpg(), target);
  }

  // optional .SensorData o3 = 23;
  if (has_o3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->o3(), target);
  }

  // optional .SensorData pm1 = 24;
  if (has_pm1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->pm1(), target);
  }

  // optional .SensorData pm2_5 = 25;
  if (has_pm2_5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->pm2_5(), target);
  }

  // optional .SensorData pm10 = 26;
  if (has_pm10()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->pm10(), target);
  }

  // optional .SensorData angle = 27;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->angle(), target);
  }

  // optional .SensorData cover = 28;
  if (has_cover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->cover(), target);
  }

  // optional .SensorData level = 29;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->level(), target);
  }

  // optional .SensorData smoke = 30;
  if (has_smoke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->smoke(), target);
  }

  // optional .SensorData pitch = 31;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->pitch(), target);
  }

  // optional .SensorData roll = 32;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->roll(), target);
  }

  // optional .SensorData yaw = 33;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->yaw(), target);
  }

  // optional .SensorDataInt flame = 34;
  if (has_flame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->flame(), target);
  }

  // optional .SensorData artificialGas = 35;
  if (has_artificialgas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->artificialgas(), target);
  }

  // optional .MultiSensorDataInt multiTemp = 36;
  if (has_multitemp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->multitemp(), target);
  }

  // optional .SensorData waterPressure = 37;
  if (has_waterpressure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->waterpressure(), target);
  }

  // optional .iBeacon ibeacon = 38;
  if (has_ibeacon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->ibeacon(), target);
  }

  // repeated .SensorData sensors = 39;
  for (int i = 0; i < this->sensors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->sensors(i), target);
  }

  // optional bool installed = 40;
  if (has_installed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->installed(), target);
  }

  // optional .ExtSmoke extSmoke = 41;
  if (has_extsmoke()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->extsmoke(), target);
  }

  // optional .ElecFireData fireData = 42;
  if (has_firedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->firedata(), target);
  }

  // optional .MantunData mtunData = 43;
  if (has_mtundata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->mtundata(), target);
  }

  // optional .AcrelData acrelData = 44;
  if (has_acreldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->acreldata(), target);
  }

  // optional .Cayman caymanData = 45;
  if (has_caymandata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->caymandata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

    // optional uint32 cmdRet = 3;
    if (has_cmdret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdret());
    }

    // optional .LpwanParam lpwanParam = 4;
    if (has_lpwanparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lpwanparam());
    }

    // optional .BleParam bleParam = 5;
    if (has_bleparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bleparam());
    }

    // optional .AppParam appParam = 6;
    if (has_appparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appparam());
    }

    // optional sint32 battery = 7;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->battery());
    }

    // optional .GpsData gps = 8;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .AxisData acceleration = 9;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // optional .AxisData magnetism = 10;
    if (has_magnetism()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magnetism());
    }

    // optional .AxisData gyroscope = 11;
    if (has_gyroscope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gyroscope());
    }

    // optional .SensorData temperature = 12;
    if (has_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temperature());
    }

    // optional .SensorData humidity = 13;
    if (has_humidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->humidity());
    }

    // optional .SensorData light = 14;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light());
    }

    // optional .SensorData leak = 15;
    if (has_leak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leak());
    }

    // optional .SensorData co = 16;
    if (has_co()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->co());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .SensorData co2 = 17;
    if (has_co2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->co2());
    }

    // optional .SensorData so2 = 18;
    if (has_so2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->so2());
    }

    // optional .SensorData no2 = 19;
    if (has_no2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->no2());
    }

    // optional .SensorData ch4 = 20;
    if (has_ch4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ch4());
    }

    // optional .SensorData ch2o = 21;
    if (has_ch2o()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ch2o());
    }

    // optional .SensorData lpg = 22;
    if (has_lpg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lpg());
    }

    // optional .SensorData o3 = 23;
    if (has_o3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->o3());
    }

    // optional .SensorData pm1 = 24;
    if (has_pm1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pm1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .SensorData pm2_5 = 25;
    if (has_pm2_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pm2_5());
    }

    // optional .SensorData pm10 = 26;
    if (has_pm10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pm10());
    }

    // optional .SensorData angle = 27;
    if (has_angle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle());
    }

    // optional .SensorData cover = 28;
    if (has_cover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cover());
    }

    // optional .SensorData level = 29;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level());
    }

    // optional .SensorData smoke = 30;
    if (has_smoke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smoke());
    }

    // optional .SensorData pitch = 31;
    if (has_pitch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pitch());
    }

    // optional .SensorData roll = 32;
    if (has_roll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roll());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .SensorData yaw = 33;
    if (has_yaw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaw());
    }

    // optional .SensorDataInt flame = 34;
    if (has_flame()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flame());
    }

    // optional .SensorData artificialGas = 35;
    if (has_artificialgas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artificialgas());
    }

    // optional .MultiSensorDataInt multiTemp = 36;
    if (has_multitemp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multitemp());
    }

    // optional .SensorData waterPressure = 37;
    if (has_waterpressure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waterpressure());
    }

    // optional .iBeacon ibeacon = 38;
    if (has_ibeacon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ibeacon());
    }

    // optional bool installed = 40;
    if (has_installed()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .ExtSmoke extSmoke = 41;
    if (has_extsmoke()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extsmoke());
    }

    // optional .ElecFireData fireData = 42;
    if (has_firedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firedata());
    }

    // optional .MantunData mtunData = 43;
    if (has_mtundata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mtundata());
    }

    // optional .AcrelData acrelData = 44;
    if (has_acreldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acreldata());
    }

    // optional .Cayman caymanData = 45;
    if (has_caymandata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caymandata());
    }

  }
  // repeated .SensorData sensors = 39;
  total_size += 2 * this->sensors_size();
  for (int i = 0; i < this->sensors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sensors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNode::MergeFrom(const MsgNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  sensors_.MergeFrom(from.sensors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_cmdret()) {
      set_cmdret(from.cmdret());
    }
    if (from.has_lpwanparam()) {
      mutable_lpwanparam()->::LpwanParam::MergeFrom(from.lpwanparam());
    }
    if (from.has_bleparam()) {
      mutable_bleparam()->::BleParam::MergeFrom(from.bleparam());
    }
    if (from.has_appparam()) {
      mutable_appparam()->::AppParam::MergeFrom(from.appparam());
    }
    if (from.has_battery()) {
      set_battery(from.battery());
    }
    if (from.has_gps()) {
      mutable_gps()->::GpsData::MergeFrom(from.gps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_acceleration()) {
      mutable_acceleration()->::AxisData::MergeFrom(from.acceleration());
    }
    if (from.has_magnetism()) {
      mutable_magnetism()->::AxisData::MergeFrom(from.magnetism());
    }
    if (from.has_gyroscope()) {
      mutable_gyroscope()->::AxisData::MergeFrom(from.gyroscope());
    }
    if (from.has_temperature()) {
      mutable_temperature()->::SensorData::MergeFrom(from.temperature());
    }
    if (from.has_humidity()) {
      mutable_humidity()->::SensorData::MergeFrom(from.humidity());
    }
    if (from.has_light()) {
      mutable_light()->::SensorData::MergeFrom(from.light());
    }
    if (from.has_leak()) {
      mutable_leak()->::SensorData::MergeFrom(from.leak());
    }
    if (from.has_co()) {
      mutable_co()->::SensorData::MergeFrom(from.co());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_co2()) {
      mutable_co2()->::SensorData::MergeFrom(from.co2());
    }
    if (from.has_so2()) {
      mutable_so2()->::SensorData::MergeFrom(from.so2());
    }
    if (from.has_no2()) {
      mutable_no2()->::SensorData::MergeFrom(from.no2());
    }
    if (from.has_ch4()) {
      mutable_ch4()->::SensorData::MergeFrom(from.ch4());
    }
    if (from.has_ch2o()) {
      mutable_ch2o()->::SensorData::MergeFrom(from.ch2o());
    }
    if (from.has_lpg()) {
      mutable_lpg()->::SensorData::MergeFrom(from.lpg());
    }
    if (from.has_o3()) {
      mutable_o3()->::SensorData::MergeFrom(from.o3());
    }
    if (from.has_pm1()) {
      mutable_pm1()->::SensorData::MergeFrom(from.pm1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pm2_5()) {
      mutable_pm2_5()->::SensorData::MergeFrom(from.pm2_5());
    }
    if (from.has_pm10()) {
      mutable_pm10()->::SensorData::MergeFrom(from.pm10());
    }
    if (from.has_angle()) {
      mutable_angle()->::SensorData::MergeFrom(from.angle());
    }
    if (from.has_cover()) {
      mutable_cover()->::SensorData::MergeFrom(from.cover());
    }
    if (from.has_level()) {
      mutable_level()->::SensorData::MergeFrom(from.level());
    }
    if (from.has_smoke()) {
      mutable_smoke()->::SensorData::MergeFrom(from.smoke());
    }
    if (from.has_pitch()) {
      mutable_pitch()->::SensorData::MergeFrom(from.pitch());
    }
    if (from.has_roll()) {
      mutable_roll()->::SensorData::MergeFrom(from.roll());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_yaw()) {
      mutable_yaw()->::SensorData::MergeFrom(from.yaw());
    }
    if (from.has_flame()) {
      mutable_flame()->::SensorDataInt::MergeFrom(from.flame());
    }
    if (from.has_artificialgas()) {
      mutable_artificialgas()->::SensorData::MergeFrom(from.artificialgas());
    }
    if (from.has_multitemp()) {
      mutable_multitemp()->::MultiSensorDataInt::MergeFrom(from.multitemp());
    }
    if (from.has_waterpressure()) {
      mutable_waterpressure()->::SensorData::MergeFrom(from.waterpressure());
    }
    if (from.has_ibeacon()) {
      mutable_ibeacon()->::iBeacon::MergeFrom(from.ibeacon());
    }
    if (from.has_installed()) {
      set_installed(from.installed());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_extsmoke()) {
      mutable_extsmoke()->::ExtSmoke::MergeFrom(from.extsmoke());
    }
    if (from.has_firedata()) {
      mutable_firedata()->::ElecFireData::MergeFrom(from.firedata());
    }
    if (from.has_mtundata()) {
      mutable_mtundata()->::MantunData::MergeFrom(from.mtundata());
    }
    if (from.has_acreldata()) {
      mutable_acreldata()->::AcrelData::MergeFrom(from.acreldata());
    }
    if (from.has_caymandata()) {
      mutable_caymandata()->::Cayman::MergeFrom(from.caymandata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNode::CopyFrom(const MsgNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNode::IsInitialized() const {

  return true;
}

void MsgNode::Swap(MsgNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cmd_, other->cmd_);
    std::swap(cmdret_, other->cmdret_);
    std::swap(lpwanparam_, other->lpwanparam_);
    std::swap(bleparam_, other->bleparam_);
    std::swap(appparam_, other->appparam_);
    std::swap(battery_, other->battery_);
    std::swap(gps_, other->gps_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(magnetism_, other->magnetism_);
    std::swap(gyroscope_, other->gyroscope_);
    std::swap(temperature_, other->temperature_);
    std::swap(humidity_, other->humidity_);
    std::swap(light_, other->light_);
    std::swap(leak_, other->leak_);
    std::swap(co_, other->co_);
    std::swap(co2_, other->co2_);
    std::swap(so2_, other->so2_);
    std::swap(no2_, other->no2_);
    std::swap(ch4_, other->ch4_);
    std::swap(ch2o_, other->ch2o_);
    std::swap(lpg_, other->lpg_);
    std::swap(o3_, other->o3_);
    std::swap(pm1_, other->pm1_);
    std::swap(pm2_5_, other->pm2_5_);
    std::swap(pm10_, other->pm10_);
    std::swap(angle_, other->angle_);
    std::swap(cover_, other->cover_);
    std::swap(level_, other->level_);
    std::swap(smoke_, other->smoke_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(yaw_, other->yaw_);
    std::swap(flame_, other->flame_);
    std::swap(artificialgas_, other->artificialgas_);
    std::swap(multitemp_, other->multitemp_);
    std::swap(waterpressure_, other->waterpressure_);
    std::swap(ibeacon_, other->ibeacon_);
    sensors_.Swap(&other->sensors_);
    std::swap(installed_, other->installed_);
    std::swap(extsmoke_, other->extsmoke_);
    std::swap(firedata_, other->firedata_);
    std::swap(mtundata_, other->mtundata_);
    std::swap(acreldata_, other->acreldata_);
    std::swap(caymandata_, other->caymandata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNode_descriptor_;
  metadata.reflection = MsgNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
