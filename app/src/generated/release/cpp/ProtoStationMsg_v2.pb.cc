// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoStationMsg_v2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoStationMsg_v2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StationMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StationMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdRet_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NwkAccessMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IPAllocationMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoStationMsg_5fv2_2eproto() {
  protobuf_AddDesc_ProtoStationMsg_5fv2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoStationMsg_v2.proto");
  GOOGLE_CHECK(file != NULL);
  StationMsg_descriptor_ = file->message_type(0);
  static const int StationMsg_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, netid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, mcdomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, mcport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, nwk_access_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, ip_alloc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, pdns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, adns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, ssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, encrypt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, self_test_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, sgl_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, sgl_dr_),
  };
  StationMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StationMsg_descriptor_,
      StationMsg::default_instance_,
      StationMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StationMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StationMsg));
  CmdRet_descriptor_ = file->enum_type(0);
  NwkAccessMode_descriptor_ = file->enum_type(1);
  IPAllocationMode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoStationMsg_5fv2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StationMsg_descriptor_, &StationMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoStationMsg_5fv2_2eproto() {
  delete StationMsg::default_instance_;
  delete StationMsg_reflection_;
}

void protobuf_AddDesc_ProtoStationMsg_5fv2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ProtoStationMsg_v2.proto\"\347\002\n\nStationMs"
    "g\022\024\n\003ret\030\001 \001(\0162\007.CmdRet\022\n\n\002sn\030\002 \001(\t\022\r\n\005n"
    "etid\030\003 \001(\t\022\020\n\010mcdomain\030\004 \001(\t\022\016\n\006mcport\030\005"
    " \001(\t\022\013\n\003key\030\006 \001(\t\022\'\n\017nwk_access_mode\030\007 \001"
    "(\0162\016.NwkAccessMode\022#\n\010ip_alloc\030\010 \001(\0162\021.I"
    "PAllocationMode\022\n\n\002ip\030\t \001(\t\022\017\n\007gateway\030\n"
    " \001(\t\022\014\n\004mask\030\013 \001(\t\022\014\n\004pdns\030\014 \001(\t\022\014\n\004adns"
    "\030\r \001(\t\022\014\n\004ssid\030\016 \001(\t\022\013\n\003pwd\030\017 \001(\t\022\017\n\007enc"
    "rypt\030\020 \001(\t\022\026\n\016self_test_code\030\021 \001(\r\022\020\n\010sg"
    "l_freq\030\022 \001(\r\022\016\n\006sgl_dr\030\023 \001(\r*x\n\006CmdRet\022\020"
    "\n\014CMD_RET_NONE\020\000\022\017\n\013CMD_RET_SUC\020\001\022\027\n\023CMD"
    "_RET_INVALID_CMD\020\002\022\027\n\023CMD_RET_INVALID_AR"
    "G\020\003\022\031\n\025CMD_RET_INVALID_STATE\020\004*K\n\rNwkAcc"
    "essMode\022\020\n\014NWK_MODE_ETH\020\000\022\021\n\rNWK_MODE_WI"
    "FI\020\001\022\025\n\021NWK_MODE_CELLULAR\020\002*:\n\020IPAllocat"
    "ionMode\022\021\n\rIP_ALLOC_DHCP\020\000\022\023\n\017IP_ALLOC_S"
    "TATIC\020\001", 647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoStationMsg_v2.proto", &protobuf_RegisterTypes);
  StationMsg::default_instance_ = new StationMsg();
  StationMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoStationMsg_5fv2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoStationMsg_5fv2_2eproto {
  StaticDescriptorInitializer_ProtoStationMsg_5fv2_2eproto() {
    protobuf_AddDesc_ProtoStationMsg_5fv2_2eproto();
  }
} static_descriptor_initializer_ProtoStationMsg_5fv2_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdRet_descriptor_;
}
bool CmdRet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NwkAccessMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NwkAccessMode_descriptor_;
}
bool NwkAccessMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IPAllocationMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IPAllocationMode_descriptor_;
}
bool IPAllocationMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int StationMsg::kRetFieldNumber;
const int StationMsg::kSnFieldNumber;
const int StationMsg::kNetidFieldNumber;
const int StationMsg::kMcdomainFieldNumber;
const int StationMsg::kMcportFieldNumber;
const int StationMsg::kKeyFieldNumber;
const int StationMsg::kNwkAccessModeFieldNumber;
const int StationMsg::kIpAllocFieldNumber;
const int StationMsg::kIpFieldNumber;
const int StationMsg::kGatewayFieldNumber;
const int StationMsg::kMaskFieldNumber;
const int StationMsg::kPdnsFieldNumber;
const int StationMsg::kAdnsFieldNumber;
const int StationMsg::kSsidFieldNumber;
const int StationMsg::kPwdFieldNumber;
const int StationMsg::kEncryptFieldNumber;
const int StationMsg::kSelfTestCodeFieldNumber;
const int StationMsg::kSglFreqFieldNumber;
const int StationMsg::kSglDrFieldNumber;
#endif  // !_MSC_VER

StationMsg::StationMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StationMsg::InitAsDefaultInstance() {
}

StationMsg::StationMsg(const StationMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StationMsg::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcdomain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nwk_access_mode_ = 0;
  ip_alloc_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdns_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adns_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encrypt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  self_test_code_ = 0u;
  sgl_freq_ = 0u;
  sgl_dr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationMsg::~StationMsg() {
  SharedDtor();
}

void StationMsg::SharedDtor() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  if (netid_ != &::google::protobuf::internal::kEmptyString) {
    delete netid_;
  }
  if (mcdomain_ != &::google::protobuf::internal::kEmptyString) {
    delete mcdomain_;
  }
  if (mcport_ != &::google::protobuf::internal::kEmptyString) {
    delete mcport_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (gateway_ != &::google::protobuf::internal::kEmptyString) {
    delete gateway_;
  }
  if (mask_ != &::google::protobuf::internal::kEmptyString) {
    delete mask_;
  }
  if (pdns_ != &::google::protobuf::internal::kEmptyString) {
    delete pdns_;
  }
  if (adns_ != &::google::protobuf::internal::kEmptyString) {
    delete adns_;
  }
  if (ssid_ != &::google::protobuf::internal::kEmptyString) {
    delete ssid_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (encrypt_ != &::google::protobuf::internal::kEmptyString) {
    delete encrypt_;
  }
  if (this != default_instance_) {
  }
}

void StationMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StationMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StationMsg_descriptor_;
}

const StationMsg& StationMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoStationMsg_5fv2_2eproto();
  return *default_instance_;
}

StationMsg* StationMsg::default_instance_ = NULL;

StationMsg* StationMsg::New() const {
  return new StationMsg;
}

void StationMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::kEmptyString) {
        sn_->clear();
      }
    }
    if (has_netid()) {
      if (netid_ != &::google::protobuf::internal::kEmptyString) {
        netid_->clear();
      }
    }
    if (has_mcdomain()) {
      if (mcdomain_ != &::google::protobuf::internal::kEmptyString) {
        mcdomain_->clear();
      }
    }
    if (has_mcport()) {
      if (mcport_ != &::google::protobuf::internal::kEmptyString) {
        mcport_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    nwk_access_mode_ = 0;
    ip_alloc_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_gateway()) {
      if (gateway_ != &::google::protobuf::internal::kEmptyString) {
        gateway_->clear();
      }
    }
    if (has_mask()) {
      if (mask_ != &::google::protobuf::internal::kEmptyString) {
        mask_->clear();
      }
    }
    if (has_pdns()) {
      if (pdns_ != &::google::protobuf::internal::kEmptyString) {
        pdns_->clear();
      }
    }
    if (has_adns()) {
      if (adns_ != &::google::protobuf::internal::kEmptyString) {
        adns_->clear();
      }
    }
    if (has_ssid()) {
      if (ssid_ != &::google::protobuf::internal::kEmptyString) {
        ssid_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_encrypt()) {
      if (encrypt_ != &::google::protobuf::internal::kEmptyString) {
        encrypt_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    self_test_code_ = 0u;
    sgl_freq_ = 0u;
    sgl_dr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StationMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CmdRet ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CmdRet_IsValid(value)) {
            set_ret(static_cast< ::CmdRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sn;
        break;
      }

      // optional string sn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_netid;
        break;
      }

      // optional string netid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netid().data(), this->netid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mcdomain;
        break;
      }

      // optional string mcdomain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mcdomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcdomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mcdomain().data(), this->mcdomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mcport;
        break;
      }

      // optional string mcport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mcport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mcport().data(), this->mcport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key;
        break;
      }

      // optional string key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nwk_access_mode;
        break;
      }

      // optional .NwkAccessMode nwk_access_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nwk_access_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NwkAccessMode_IsValid(value)) {
            set_nwk_access_mode(static_cast< ::NwkAccessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ip_alloc;
        break;
      }

      // optional .IPAllocationMode ip_alloc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip_alloc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IPAllocationMode_IsValid(value)) {
            set_ip_alloc(static_cast< ::IPAllocationMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_gateway;
        break;
      }

      // optional string gateway = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_mask;
        break;
      }

      // optional string mask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mask().data(), this->mask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pdns;
        break;
      }

      // optional string pdns = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdns().data(), this->pdns().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_adns;
        break;
      }

      // optional string adns = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adns().data(), this->adns().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ssid;
        break;
      }

      // optional string ssid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ssid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ssid().data(), this->ssid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pwd;
        break;
      }

      // optional string pwd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_encrypt;
        break;
      }

      // optional string encrypt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encrypt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encrypt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encrypt().data(), this->encrypt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_self_test_code;
        break;
      }

      // optional uint32 self_test_code = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_test_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_test_code_)));
          set_has_self_test_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sgl_freq;
        break;
      }

      // optional uint32 sgl_freq = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sgl_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sgl_freq_)));
          set_has_sgl_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sgl_dr;
        break;
      }

      // optional uint32 sgl_dr = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sgl_dr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sgl_dr_)));
          set_has_sgl_dr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CmdRet ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional string sn = 2;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sn(), output);
  }

  // optional string netid = 3;
  if (has_netid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netid().data(), this->netid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->netid(), output);
  }

  // optional string mcdomain = 4;
  if (has_mcdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcdomain().data(), this->mcdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mcdomain(), output);
  }

  // optional string mcport = 5;
  if (has_mcport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcport().data(), this->mcport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mcport(), output);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key(), output);
  }

  // optional .NwkAccessMode nwk_access_mode = 7;
  if (has_nwk_access_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->nwk_access_mode(), output);
  }

  // optional .IPAllocationMode ip_alloc = 8;
  if (has_ip_alloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ip_alloc(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ip(), output);
  }

  // optional string gateway = 10;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gateway(), output);
  }

  // optional string mask = 11;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask().data(), this->mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->mask(), output);
  }

  // optional string pdns = 12;
  if (has_pdns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdns().data(), this->pdns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pdns(), output);
  }

  // optional string adns = 13;
  if (has_adns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adns().data(), this->adns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->adns(), output);
  }

  // optional string ssid = 14;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssid().data(), this->ssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->ssid(), output);
  }

  // optional string pwd = 15;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->pwd(), output);
  }

  // optional string encrypt = 16;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->encrypt(), output);
  }

  // optional uint32 self_test_code = 17;
  if (has_self_test_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->self_test_code(), output);
  }

  // optional uint32 sgl_freq = 18;
  if (has_sgl_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sgl_freq(), output);
  }

  // optional uint32 sgl_dr = 19;
  if (has_sgl_dr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->sgl_dr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StationMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CmdRet ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional string sn = 2;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sn(), target);
  }

  // optional string netid = 3;
  if (has_netid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netid().data(), this->netid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->netid(), target);
  }

  // optional string mcdomain = 4;
  if (has_mcdomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcdomain().data(), this->mcdomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mcdomain(), target);
  }

  // optional string mcport = 5;
  if (has_mcport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mcport().data(), this->mcport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mcport(), target);
  }

  // optional string key = 6;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key(), target);
  }

  // optional .NwkAccessMode nwk_access_mode = 7;
  if (has_nwk_access_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->nwk_access_mode(), target);
  }

  // optional .IPAllocationMode ip_alloc = 8;
  if (has_ip_alloc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ip_alloc(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  // optional string gateway = 10;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gateway(), target);
  }

  // optional string mask = 11;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mask().data(), this->mask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->mask(), target);
  }

  // optional string pdns = 12;
  if (has_pdns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdns().data(), this->pdns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pdns(), target);
  }

  // optional string adns = 13;
  if (has_adns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adns().data(), this->adns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->adns(), target);
  }

  // optional string ssid = 14;
  if (has_ssid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ssid().data(), this->ssid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->ssid(), target);
  }

  // optional string pwd = 15;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pwd(), target);
  }

  // optional string encrypt = 16;
  if (has_encrypt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encrypt().data(), this->encrypt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->encrypt(), target);
  }

  // optional uint32 self_test_code = 17;
  if (has_self_test_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->self_test_code(), target);
  }

  // optional uint32 sgl_freq = 18;
  if (has_sgl_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sgl_freq(), target);
  }

  // optional uint32 sgl_dr = 19;
  if (has_sgl_dr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->sgl_dr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StationMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CmdRet ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional string sn = 2;
    if (has_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // optional string netid = 3;
    if (has_netid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netid());
    }

    // optional string mcdomain = 4;
    if (has_mcdomain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcdomain());
    }

    // optional string mcport = 5;
    if (has_mcport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcport());
    }

    // optional string key = 6;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .NwkAccessMode nwk_access_mode = 7;
    if (has_nwk_access_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nwk_access_mode());
    }

    // optional .IPAllocationMode ip_alloc = 8;
    if (has_ip_alloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ip_alloc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ip = 9;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string gateway = 10;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway());
    }

    // optional string mask = 11;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask());
    }

    // optional string pdns = 12;
    if (has_pdns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdns());
    }

    // optional string adns = 13;
    if (has_adns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adns());
    }

    // optional string ssid = 14;
    if (has_ssid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ssid());
    }

    // optional string pwd = 15;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string encrypt = 16;
    if (has_encrypt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encrypt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 self_test_code = 17;
    if (has_self_test_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_test_code());
    }

    // optional uint32 sgl_freq = 18;
    if (has_sgl_freq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sgl_freq());
    }

    // optional uint32 sgl_dr = 19;
    if (has_sgl_dr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sgl_dr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StationMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StationMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StationMsg::MergeFrom(const StationMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_netid()) {
      set_netid(from.netid());
    }
    if (from.has_mcdomain()) {
      set_mcdomain(from.mcdomain());
    }
    if (from.has_mcport()) {
      set_mcport(from.mcport());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_nwk_access_mode()) {
      set_nwk_access_mode(from.nwk_access_mode());
    }
    if (from.has_ip_alloc()) {
      set_ip_alloc(from.ip_alloc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_gateway()) {
      set_gateway(from.gateway());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_pdns()) {
      set_pdns(from.pdns());
    }
    if (from.has_adns()) {
      set_adns(from.adns());
    }
    if (from.has_ssid()) {
      set_ssid(from.ssid());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_encrypt()) {
      set_encrypt(from.encrypt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_self_test_code()) {
      set_self_test_code(from.self_test_code());
    }
    if (from.has_sgl_freq()) {
      set_sgl_freq(from.sgl_freq());
    }
    if (from.has_sgl_dr()) {
      set_sgl_dr(from.sgl_dr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StationMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationMsg::CopyFrom(const StationMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationMsg::IsInitialized() const {

  return true;
}

void StationMsg::Swap(StationMsg* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sn_, other->sn_);
    std::swap(netid_, other->netid_);
    std::swap(mcdomain_, other->mcdomain_);
    std::swap(mcport_, other->mcport_);
    std::swap(key_, other->key_);
    std::swap(nwk_access_mode_, other->nwk_access_mode_);
    std::swap(ip_alloc_, other->ip_alloc_);
    std::swap(ip_, other->ip_);
    std::swap(gateway_, other->gateway_);
    std::swap(mask_, other->mask_);
    std::swap(pdns_, other->pdns_);
    std::swap(adns_, other->adns_);
    std::swap(ssid_, other->ssid_);
    std::swap(pwd_, other->pwd_);
    std::swap(encrypt_, other->encrypt_);
    std::swap(self_test_code_, other->self_test_code_);
    std::swap(sgl_freq_, other->sgl_freq_);
    std::swap(sgl_dr_, other->sgl_dr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StationMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StationMsg_descriptor_;
  metadata.reflection = StationMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
